// Code generated by Kitex v0.14.1. DO NOT EDIT.

package chatmanagementservice

import (
	"context"
	"errors"
	manageservice "github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/chat/manageservice"
	base "github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/common/base"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetChatObjectList": kitex.NewMethodInfo(
		getChatObjectListHandler,
		newChatManagementServiceGetChatObjectListArgs,
		newChatManagementServiceGetChatObjectListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EditChatObject": kitex.NewMethodInfo(
		editChatObjectHandler,
		newChatManagementServiceEditChatObjectArgs,
		newChatManagementServiceEditChatObjectResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetChatListById": kitex.NewMethodInfo(
		getChatListByIdHandler,
		newChatManagementServiceGetChatListByIdArgs,
		newChatManagementServiceGetChatListByIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateChatItem": kitex.NewMethodInfo(
		createChatItemHandler,
		newChatManagementServiceCreateChatItemArgs,
		newChatManagementServiceCreateChatItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateChatSession": kitex.NewMethodInfo(
		createChatSessionHandler,
		newChatManagementServiceCreateChatSessionArgs,
		newChatManagementServiceCreateChatSessionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadFile": kitex.NewMethodInfo(
		uploadFileHandler,
		newChatManagementServiceUploadFileArgs,
		newChatManagementServiceUploadFileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFileListByMessageId": kitex.NewMethodInfo(
		getFileListByMessageIdHandler,
		newChatManagementServiceGetFileListByMessageIdArgs,
		newChatManagementServiceGetFileListByMessageIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteChatObject": kitex.NewMethodInfo(
		deleteChatObjectHandler,
		newChatManagementServiceDeleteChatObjectArgs,
		newChatManagementServiceDeleteChatObjectResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetChatSessionList": kitex.NewMethodInfo(
		getChatSessionListHandler,
		newChatManagementServiceGetChatSessionListArgs,
		newChatManagementServiceGetChatSessionListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	chatManagementServiceServiceInfo                = NewServiceInfo()
	chatManagementServiceServiceInfoForClient       = NewServiceInfoForClient()
	chatManagementServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return chatManagementServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return chatManagementServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return chatManagementServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ChatManagementService"
	handlerType := (*manageservice.ChatManagementService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "manageservice",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func getChatObjectListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.ChatManagementServiceGetChatObjectListArgs)
	realResult := result.(*manageservice.ChatManagementServiceGetChatObjectListResult)
	success, err := handler.(manageservice.ChatManagementService).GetChatObjectList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatManagementServiceGetChatObjectListArgs() interface{} {
	return manageservice.NewChatManagementServiceGetChatObjectListArgs()
}

func newChatManagementServiceGetChatObjectListResult() interface{} {
	return manageservice.NewChatManagementServiceGetChatObjectListResult()
}

func editChatObjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.ChatManagementServiceEditChatObjectArgs)
	realResult := result.(*manageservice.ChatManagementServiceEditChatObjectResult)
	success, err := handler.(manageservice.ChatManagementService).EditChatObject(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatManagementServiceEditChatObjectArgs() interface{} {
	return manageservice.NewChatManagementServiceEditChatObjectArgs()
}

func newChatManagementServiceEditChatObjectResult() interface{} {
	return manageservice.NewChatManagementServiceEditChatObjectResult()
}

func getChatListByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.ChatManagementServiceGetChatListByIdArgs)
	realResult := result.(*manageservice.ChatManagementServiceGetChatListByIdResult)
	success, err := handler.(manageservice.ChatManagementService).GetChatListById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatManagementServiceGetChatListByIdArgs() interface{} {
	return manageservice.NewChatManagementServiceGetChatListByIdArgs()
}

func newChatManagementServiceGetChatListByIdResult() interface{} {
	return manageservice.NewChatManagementServiceGetChatListByIdResult()
}

func createChatItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.ChatManagementServiceCreateChatItemArgs)
	realResult := result.(*manageservice.ChatManagementServiceCreateChatItemResult)
	success, err := handler.(manageservice.ChatManagementService).CreateChatItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatManagementServiceCreateChatItemArgs() interface{} {
	return manageservice.NewChatManagementServiceCreateChatItemArgs()
}

func newChatManagementServiceCreateChatItemResult() interface{} {
	return manageservice.NewChatManagementServiceCreateChatItemResult()
}

func createChatSessionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.ChatManagementServiceCreateChatSessionArgs)
	realResult := result.(*manageservice.ChatManagementServiceCreateChatSessionResult)
	success, err := handler.(manageservice.ChatManagementService).CreateChatSession(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatManagementServiceCreateChatSessionArgs() interface{} {
	return manageservice.NewChatManagementServiceCreateChatSessionArgs()
}

func newChatManagementServiceCreateChatSessionResult() interface{} {
	return manageservice.NewChatManagementServiceCreateChatSessionResult()
}

func uploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.ChatManagementServiceUploadFileArgs)
	realResult := result.(*manageservice.ChatManagementServiceUploadFileResult)
	success, err := handler.(manageservice.ChatManagementService).UploadFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatManagementServiceUploadFileArgs() interface{} {
	return manageservice.NewChatManagementServiceUploadFileArgs()
}

func newChatManagementServiceUploadFileResult() interface{} {
	return manageservice.NewChatManagementServiceUploadFileResult()
}

func getFileListByMessageIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.ChatManagementServiceGetFileListByMessageIdArgs)
	realResult := result.(*manageservice.ChatManagementServiceGetFileListByMessageIdResult)
	success, err := handler.(manageservice.ChatManagementService).GetFileListByMessageId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatManagementServiceGetFileListByMessageIdArgs() interface{} {
	return manageservice.NewChatManagementServiceGetFileListByMessageIdArgs()
}

func newChatManagementServiceGetFileListByMessageIdResult() interface{} {
	return manageservice.NewChatManagementServiceGetFileListByMessageIdResult()
}

func deleteChatObjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.ChatManagementServiceDeleteChatObjectArgs)
	realResult := result.(*manageservice.ChatManagementServiceDeleteChatObjectResult)
	success, err := handler.(manageservice.ChatManagementService).DeleteChatObject(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatManagementServiceDeleteChatObjectArgs() interface{} {
	return manageservice.NewChatManagementServiceDeleteChatObjectArgs()
}

func newChatManagementServiceDeleteChatObjectResult() interface{} {
	return manageservice.NewChatManagementServiceDeleteChatObjectResult()
}

func getChatSessionListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.ChatManagementServiceGetChatSessionListArgs)
	realResult := result.(*manageservice.ChatManagementServiceGetChatSessionListResult)
	success, err := handler.(manageservice.ChatManagementService).GetChatSessionList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatManagementServiceGetChatSessionListArgs() interface{} {
	return manageservice.NewChatManagementServiceGetChatSessionListArgs()
}

func newChatManagementServiceGetChatSessionListResult() interface{} {
	return manageservice.NewChatManagementServiceGetChatSessionListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetChatObjectList(ctx context.Context, req *manageservice.GetChatObjectListReq) (r *manageservice.GetChatObjectListResp, err error) {
	var _args manageservice.ChatManagementServiceGetChatObjectListArgs
	_args.Req = req
	var _result manageservice.ChatManagementServiceGetChatObjectListResult
	if err = p.c.Call(ctx, "GetChatObjectList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EditChatObject(ctx context.Context, req *manageservice.ChatObject) (r *base.BaseResp, err error) {
	var _args manageservice.ChatManagementServiceEditChatObjectArgs
	_args.Req = req
	var _result manageservice.ChatManagementServiceEditChatObjectResult
	if err = p.c.Call(ctx, "EditChatObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetChatListById(ctx context.Context, req *manageservice.GetChatListByIdReq) (r *manageservice.GetChatListByIdResp, err error) {
	var _args manageservice.ChatManagementServiceGetChatListByIdArgs
	_args.Req = req
	var _result manageservice.ChatManagementServiceGetChatListByIdResult
	if err = p.c.Call(ctx, "GetChatListById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateChatItem(ctx context.Context, req *manageservice.ChatItem) (r *manageservice.CreateChatItemRsp, err error) {
	var _args manageservice.ChatManagementServiceCreateChatItemArgs
	_args.Req = req
	var _result manageservice.ChatManagementServiceCreateChatItemResult
	if err = p.c.Call(ctx, "CreateChatItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateChatSession(ctx context.Context, req *manageservice.CreateChatSessionReq) (r *manageservice.CreateChatSessionResp, err error) {
	var _args manageservice.ChatManagementServiceCreateChatSessionArgs
	_args.Req = req
	var _result manageservice.ChatManagementServiceCreateChatSessionResult
	if err = p.c.Call(ctx, "CreateChatSession", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadFile(ctx context.Context, req *manageservice.UploadFileReq) (r *manageservice.UploadFileResp, err error) {
	var _args manageservice.ChatManagementServiceUploadFileArgs
	_args.Req = req
	var _result manageservice.ChatManagementServiceUploadFileResult
	if err = p.c.Call(ctx, "UploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFileListByMessageId(ctx context.Context, req *manageservice.GetFileListByMessageIdReq) (r *manageservice.GetFileListByMessageIdResp, err error) {
	var _args manageservice.ChatManagementServiceGetFileListByMessageIdArgs
	_args.Req = req
	var _result manageservice.ChatManagementServiceGetFileListByMessageIdResult
	if err = p.c.Call(ctx, "GetFileListByMessageId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteChatObject(ctx context.Context, req *manageservice.DeleteChatObjectReq) (r *manageservice.DeleteChatObjectResp, err error) {
	var _args manageservice.ChatManagementServiceDeleteChatObjectArgs
	_args.Req = req
	var _result manageservice.ChatManagementServiceDeleteChatObjectResult
	if err = p.c.Call(ctx, "DeleteChatObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetChatSessionList(ctx context.Context, req *manageservice.GetChatSessionListReq) (r *manageservice.GetChatSessionListResp, err error) {
	var _args manageservice.ChatManagementServiceGetChatSessionListArgs
	_args.Req = req
	var _result manageservice.ChatManagementServiceGetChatSessionListResult
	if err = p.c.Call(ctx, "GetChatSessionList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
