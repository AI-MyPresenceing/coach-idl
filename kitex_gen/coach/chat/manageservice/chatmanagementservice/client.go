// Code generated by Kitex v0.14.1. DO NOT EDIT.

package chatmanagementservice

import (
	"context"
	base "github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/chat/base"
	manageservice "github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/chat/manageservice"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetChatObjectList(ctx context.Context, req *manageservice.GetChatObjectListReq, callOptions ...callopt.Option) (r *manageservice.GetChatObjectListResp, err error)
	EditChatObject(ctx context.Context, req *manageservice.ChatObject, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	GetChatListById(ctx context.Context, req *manageservice.GetChatListByIdReq, callOptions ...callopt.Option) (r *manageservice.GetChatListByIdResp, err error)
	CreateChatItem(ctx context.Context, req *manageservice.ChatItem, callOptions ...callopt.Option) (r *manageservice.CreateChatItemRsp, err error)
	UploadFile(ctx context.Context, req *manageservice.UploadFileReq, callOptions ...callopt.Option) (r *manageservice.UploadFileResp, err error)
	GetFileListByMessageId(ctx context.Context, req *manageservice.GetFileListByMessageIdReq, callOptions ...callopt.Option) (r *manageservice.GetFileListByMessageIdResp, err error)
	DeleteChatObject(ctx context.Context, req *manageservice.DeleteChatObjectReq, callOptions ...callopt.Option) (r *manageservice.DeleteChatObjectResp, err error)
	GetChatSessionList(ctx context.Context, req *manageservice.GetChatSessionListReq, callOptions ...callopt.Option) (r *manageservice.GetChatSessionListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kChatManagementServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kChatManagementServiceClient struct {
	*kClient
}

func (p *kChatManagementServiceClient) GetChatObjectList(ctx context.Context, req *manageservice.GetChatObjectListReq, callOptions ...callopt.Option) (r *manageservice.GetChatObjectListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetChatObjectList(ctx, req)
}

func (p *kChatManagementServiceClient) EditChatObject(ctx context.Context, req *manageservice.ChatObject, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EditChatObject(ctx, req)
}

func (p *kChatManagementServiceClient) GetChatListById(ctx context.Context, req *manageservice.GetChatListByIdReq, callOptions ...callopt.Option) (r *manageservice.GetChatListByIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetChatListById(ctx, req)
}

func (p *kChatManagementServiceClient) CreateChatItem(ctx context.Context, req *manageservice.ChatItem, callOptions ...callopt.Option) (r *manageservice.CreateChatItemRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateChatItem(ctx, req)
}

func (p *kChatManagementServiceClient) UploadFile(ctx context.Context, req *manageservice.UploadFileReq, callOptions ...callopt.Option) (r *manageservice.UploadFileResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadFile(ctx, req)
}

func (p *kChatManagementServiceClient) GetFileListByMessageId(ctx context.Context, req *manageservice.GetFileListByMessageIdReq, callOptions ...callopt.Option) (r *manageservice.GetFileListByMessageIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFileListByMessageId(ctx, req)
}

func (p *kChatManagementServiceClient) DeleteChatObject(ctx context.Context, req *manageservice.DeleteChatObjectReq, callOptions ...callopt.Option) (r *manageservice.DeleteChatObjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteChatObject(ctx, req)
}

func (p *kChatManagementServiceClient) GetChatSessionList(ctx context.Context, req *manageservice.GetChatSessionListReq, callOptions ...callopt.Option) (r *manageservice.GetChatSessionListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetChatSessionList(ctx, req)
}
