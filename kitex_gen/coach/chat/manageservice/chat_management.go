// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package manageservice

import (
	"context"
	"fmt"
	"github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/chat/base"
)

type ChatItem struct {
	Id      int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	ChatId  string `thrift:"chat_id,2" frugal:"2,default,string" json:"chat_id"`
	Role    string `thrift:"role,3" frugal:"3,default,string" json:"role"`
	Content string `thrift:"content,4" frugal:"4,default,string" json:"content"`
}

func NewChatItem() *ChatItem {
	return &ChatItem{}
}

func (p *ChatItem) InitDefault() {
}

func (p *ChatItem) GetId() (v int64) {
	return p.Id
}

func (p *ChatItem) GetChatId() (v string) {
	return p.ChatId
}

func (p *ChatItem) GetRole() (v string) {
	return p.Role
}

func (p *ChatItem) GetContent() (v string) {
	return p.Content
}
func (p *ChatItem) SetId(val int64) {
	p.Id = val
}
func (p *ChatItem) SetChatId(val string) {
	p.ChatId = val
}
func (p *ChatItem) SetRole(val string) {
	p.Role = val
}
func (p *ChatItem) SetContent(val string) {
	p.Content = val
}

func (p *ChatItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatItem(%+v)", *p)
}

var fieldIDToName_ChatItem = map[int16]string{
	1: "id",
	2: "chat_id",
	3: "role",
	4: "content",
}

type ChatObject struct {
	Id       int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Name     string `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Avatar   string `thrift:"avatar,3" frugal:"3,default,string" json:"avatar"`
	Position string `thrift:"position,4" frugal:"4,default,string" json:"position"`
	Relation string `thrift:"relation,5" frugal:"5,default,string" json:"relation"`
}

func NewChatObject() *ChatObject {
	return &ChatObject{}
}

func (p *ChatObject) InitDefault() {
}

func (p *ChatObject) GetId() (v int64) {
	return p.Id
}

func (p *ChatObject) GetName() (v string) {
	return p.Name
}

func (p *ChatObject) GetAvatar() (v string) {
	return p.Avatar
}

func (p *ChatObject) GetPosition() (v string) {
	return p.Position
}

func (p *ChatObject) GetRelation() (v string) {
	return p.Relation
}
func (p *ChatObject) SetId(val int64) {
	p.Id = val
}
func (p *ChatObject) SetName(val string) {
	p.Name = val
}
func (p *ChatObject) SetAvatar(val string) {
	p.Avatar = val
}
func (p *ChatObject) SetPosition(val string) {
	p.Position = val
}
func (p *ChatObject) SetRelation(val string) {
	p.Relation = val
}

func (p *ChatObject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatObject(%+v)", *p)
}

var fieldIDToName_ChatObject = map[int16]string{
	1: "id",
	2: "name",
	3: "avatar",
	4: "position",
	5: "relation",
}

type FileItem struct {
	FileId   string `thrift:"file_id,1" frugal:"1,default,string" json:"file_id"`
	FileUrl  string `thrift:"file_url,2" frugal:"2,default,string" json:"file_url"`
	FileName string `thrift:"file_name,3" frugal:"3,default,string" json:"file_name"`
	FileType string `thrift:"file_type,4" frugal:"4,default,string" json:"file_type"`
}

func NewFileItem() *FileItem {
	return &FileItem{}
}

func (p *FileItem) InitDefault() {
}

func (p *FileItem) GetFileId() (v string) {
	return p.FileId
}

func (p *FileItem) GetFileUrl() (v string) {
	return p.FileUrl
}

func (p *FileItem) GetFileName() (v string) {
	return p.FileName
}

func (p *FileItem) GetFileType() (v string) {
	return p.FileType
}
func (p *FileItem) SetFileId(val string) {
	p.FileId = val
}
func (p *FileItem) SetFileUrl(val string) {
	p.FileUrl = val
}
func (p *FileItem) SetFileName(val string) {
	p.FileName = val
}
func (p *FileItem) SetFileType(val string) {
	p.FileType = val
}

func (p *FileItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileItem(%+v)", *p)
}

var fieldIDToName_FileItem = map[int16]string{
	1: "file_id",
	2: "file_url",
	3: "file_name",
	4: "file_type",
}

type GetChatObjectListReq struct {
	UserId string `thrift:"user_id,1,required" frugal:"1,required,string" json:"user_id"`
}

func NewGetChatObjectListReq() *GetChatObjectListReq {
	return &GetChatObjectListReq{}
}

func (p *GetChatObjectListReq) InitDefault() {
}

func (p *GetChatObjectListReq) GetUserId() (v string) {
	return p.UserId
}
func (p *GetChatObjectListReq) SetUserId(val string) {
	p.UserId = val
}

func (p *GetChatObjectListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatObjectListReq(%+v)", *p)
}

var fieldIDToName_GetChatObjectListReq = map[int16]string{
	1: "user_id",
}

type GetChatObjectListResp struct {
	ChatObjectList []*ChatObject  `thrift:"chat_object_list,1" frugal:"1,default,list<ChatObject>" json:"chat_object_list"`
	BaseResp       *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetChatObjectListResp() *GetChatObjectListResp {
	return &GetChatObjectListResp{}
}

func (p *GetChatObjectListResp) InitDefault() {
}

func (p *GetChatObjectListResp) GetChatObjectList() (v []*ChatObject) {
	return p.ChatObjectList
}

var GetChatObjectListResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetChatObjectListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetChatObjectListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetChatObjectListResp) SetChatObjectList(val []*ChatObject) {
	p.ChatObjectList = val
}
func (p *GetChatObjectListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetChatObjectListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetChatObjectListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatObjectListResp(%+v)", *p)
}

var fieldIDToName_GetChatObjectListResp = map[int16]string{
	1:   "chat_object_list",
	255: "baseResp",
}

type GetChatListByIdReq struct {
	ChatId string `thrift:"chat_id,1,required" frugal:"1,required,string" json:"chat_id"`
}

func NewGetChatListByIdReq() *GetChatListByIdReq {
	return &GetChatListByIdReq{}
}

func (p *GetChatListByIdReq) InitDefault() {
}

func (p *GetChatListByIdReq) GetChatId() (v string) {
	return p.ChatId
}
func (p *GetChatListByIdReq) SetChatId(val string) {
	p.ChatId = val
}

func (p *GetChatListByIdReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatListByIdReq(%+v)", *p)
}

var fieldIDToName_GetChatListByIdReq = map[int16]string{
	1: "chat_id",
}

type GetChatListByIdResp struct {
	ChatList []*ChatItem    `thrift:"chat_list,1" frugal:"1,default,list<ChatItem>" json:"chat_list"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetChatListByIdResp() *GetChatListByIdResp {
	return &GetChatListByIdResp{}
}

func (p *GetChatListByIdResp) InitDefault() {
}

func (p *GetChatListByIdResp) GetChatList() (v []*ChatItem) {
	return p.ChatList
}

var GetChatListByIdResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetChatListByIdResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetChatListByIdResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetChatListByIdResp) SetChatList(val []*ChatItem) {
	p.ChatList = val
}
func (p *GetChatListByIdResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetChatListByIdResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetChatListByIdResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatListByIdResp(%+v)", *p)
}

var fieldIDToName_GetChatListByIdResp = map[int16]string{
	1:   "chat_list",
	255: "baseResp",
}

type CreateChatItemRsp struct {
	ChatId   string         `thrift:"chat_id,1" frugal:"1,default,string" json:"chat_id"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewCreateChatItemRsp() *CreateChatItemRsp {
	return &CreateChatItemRsp{}
}

func (p *CreateChatItemRsp) InitDefault() {
}

func (p *CreateChatItemRsp) GetChatId() (v string) {
	return p.ChatId
}

var CreateChatItemRsp_BaseResp_DEFAULT *base.BaseResp

func (p *CreateChatItemRsp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateChatItemRsp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateChatItemRsp) SetChatId(val string) {
	p.ChatId = val
}
func (p *CreateChatItemRsp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *CreateChatItemRsp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateChatItemRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatItemRsp(%+v)", *p)
}

var fieldIDToName_CreateChatItemRsp = map[int16]string{
	1:   "chat_id",
	255: "baseResp",
}

type UploadFileReq struct {
	MessageId string `thrift:"message_id,1,required" frugal:"1,required,string" json:"message_id"`
	FileData  []byte `thrift:"file_data,2,required" frugal:"2,required,binary" json:"file_data"`
	FileName  string `thrift:"file_name,3,required" frugal:"3,required,string" json:"file_name"`
	FileType  string `thrift:"file_type,4,required" frugal:"4,required,string" json:"file_type"`
}

func NewUploadFileReq() *UploadFileReq {
	return &UploadFileReq{}
}

func (p *UploadFileReq) InitDefault() {
}

func (p *UploadFileReq) GetMessageId() (v string) {
	return p.MessageId
}

func (p *UploadFileReq) GetFileData() (v []byte) {
	return p.FileData
}

func (p *UploadFileReq) GetFileName() (v string) {
	return p.FileName
}

func (p *UploadFileReq) GetFileType() (v string) {
	return p.FileType
}
func (p *UploadFileReq) SetMessageId(val string) {
	p.MessageId = val
}
func (p *UploadFileReq) SetFileData(val []byte) {
	p.FileData = val
}
func (p *UploadFileReq) SetFileName(val string) {
	p.FileName = val
}
func (p *UploadFileReq) SetFileType(val string) {
	p.FileType = val
}

func (p *UploadFileReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadFileReq(%+v)", *p)
}

var fieldIDToName_UploadFileReq = map[int16]string{
	1: "message_id",
	2: "file_data",
	3: "file_name",
	4: "file_type",
}

type UploadFileResp struct {
	FileId   string         `thrift:"file_id,1" frugal:"1,default,string" json:"file_id"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewUploadFileResp() *UploadFileResp {
	return &UploadFileResp{}
}

func (p *UploadFileResp) InitDefault() {
}

func (p *UploadFileResp) GetFileId() (v string) {
	return p.FileId
}

var UploadFileResp_BaseResp_DEFAULT *base.BaseResp

func (p *UploadFileResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return UploadFileResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UploadFileResp) SetFileId(val string) {
	p.FileId = val
}
func (p *UploadFileResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *UploadFileResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UploadFileResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadFileResp(%+v)", *p)
}

var fieldIDToName_UploadFileResp = map[int16]string{
	1:   "file_id",
	255: "baseResp",
}

type GetFileListByMessageIdReq struct {
	MessageId string `thrift:"message_id,1,required" frugal:"1,required,string" json:"message_id"`
}

func NewGetFileListByMessageIdReq() *GetFileListByMessageIdReq {
	return &GetFileListByMessageIdReq{}
}

func (p *GetFileListByMessageIdReq) InitDefault() {
}

func (p *GetFileListByMessageIdReq) GetMessageId() (v string) {
	return p.MessageId
}
func (p *GetFileListByMessageIdReq) SetMessageId(val string) {
	p.MessageId = val
}

func (p *GetFileListByMessageIdReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFileListByMessageIdReq(%+v)", *p)
}

var fieldIDToName_GetFileListByMessageIdReq = map[int16]string{
	1: "message_id",
}

type GetFileListByMessageIdResp struct {
	FileList []*FileItem    `thrift:"file_list,1" frugal:"1,default,list<FileItem>" json:"file_list"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetFileListByMessageIdResp() *GetFileListByMessageIdResp {
	return &GetFileListByMessageIdResp{}
}

func (p *GetFileListByMessageIdResp) InitDefault() {
}

func (p *GetFileListByMessageIdResp) GetFileList() (v []*FileItem) {
	return p.FileList
}

var GetFileListByMessageIdResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetFileListByMessageIdResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetFileListByMessageIdResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetFileListByMessageIdResp) SetFileList(val []*FileItem) {
	p.FileList = val
}
func (p *GetFileListByMessageIdResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetFileListByMessageIdResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetFileListByMessageIdResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFileListByMessageIdResp(%+v)", *p)
}

var fieldIDToName_GetFileListByMessageIdResp = map[int16]string{
	1:   "file_list",
	255: "baseResp",
}

type ChatManagementService interface {
	GetChatObjectList(ctx context.Context, req *GetChatObjectListReq) (r *GetChatObjectListResp, err error)

	EditChatObject(ctx context.Context, req *ChatObject) (r *base.BaseResp, err error)

	GetChatListById(ctx context.Context, req *GetChatListByIdReq) (r *GetChatListByIdResp, err error)

	CreateChatItem(ctx context.Context, req *ChatItem) (r *CreateChatItemRsp, err error)

	UploadFile(ctx context.Context, req *UploadFileReq) (r *UploadFileResp, err error)

	GetFileListByMessageId(ctx context.Context, req *GetFileListByMessageIdReq) (r *GetFileListByMessageIdResp, err error)
}

type ChatManagementServiceGetChatObjectListArgs struct {
	Req *GetChatObjectListReq `thrift:"req,1" frugal:"1,default,GetChatObjectListReq" json:"req"`
}

func NewChatManagementServiceGetChatObjectListArgs() *ChatManagementServiceGetChatObjectListArgs {
	return &ChatManagementServiceGetChatObjectListArgs{}
}

func (p *ChatManagementServiceGetChatObjectListArgs) InitDefault() {
}

var ChatManagementServiceGetChatObjectListArgs_Req_DEFAULT *GetChatObjectListReq

func (p *ChatManagementServiceGetChatObjectListArgs) GetReq() (v *GetChatObjectListReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceGetChatObjectListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceGetChatObjectListArgs) SetReq(val *GetChatObjectListReq) {
	p.Req = val
}

func (p *ChatManagementServiceGetChatObjectListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceGetChatObjectListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatObjectListArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatObjectListArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceGetChatObjectListResult struct {
	Success *GetChatObjectListResp `thrift:"success,0,optional" frugal:"0,optional,GetChatObjectListResp" json:"success,omitempty"`
}

func NewChatManagementServiceGetChatObjectListResult() *ChatManagementServiceGetChatObjectListResult {
	return &ChatManagementServiceGetChatObjectListResult{}
}

func (p *ChatManagementServiceGetChatObjectListResult) InitDefault() {
}

var ChatManagementServiceGetChatObjectListResult_Success_DEFAULT *GetChatObjectListResp

func (p *ChatManagementServiceGetChatObjectListResult) GetSuccess() (v *GetChatObjectListResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceGetChatObjectListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceGetChatObjectListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetChatObjectListResp)
}

func (p *ChatManagementServiceGetChatObjectListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceGetChatObjectListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatObjectListResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatObjectListResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceEditChatObjectArgs struct {
	Req *ChatObject `thrift:"req,1" frugal:"1,default,ChatObject" json:"req"`
}

func NewChatManagementServiceEditChatObjectArgs() *ChatManagementServiceEditChatObjectArgs {
	return &ChatManagementServiceEditChatObjectArgs{}
}

func (p *ChatManagementServiceEditChatObjectArgs) InitDefault() {
}

var ChatManagementServiceEditChatObjectArgs_Req_DEFAULT *ChatObject

func (p *ChatManagementServiceEditChatObjectArgs) GetReq() (v *ChatObject) {
	if !p.IsSetReq() {
		return ChatManagementServiceEditChatObjectArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceEditChatObjectArgs) SetReq(val *ChatObject) {
	p.Req = val
}

func (p *ChatManagementServiceEditChatObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceEditChatObjectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceEditChatObjectArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceEditChatObjectArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceEditChatObjectResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewChatManagementServiceEditChatObjectResult() *ChatManagementServiceEditChatObjectResult {
	return &ChatManagementServiceEditChatObjectResult{}
}

func (p *ChatManagementServiceEditChatObjectResult) InitDefault() {
}

var ChatManagementServiceEditChatObjectResult_Success_DEFAULT *base.BaseResp

func (p *ChatManagementServiceEditChatObjectResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceEditChatObjectResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceEditChatObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *ChatManagementServiceEditChatObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceEditChatObjectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceEditChatObjectResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceEditChatObjectResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceGetChatListByIdArgs struct {
	Req *GetChatListByIdReq `thrift:"req,1" frugal:"1,default,GetChatListByIdReq" json:"req"`
}

func NewChatManagementServiceGetChatListByIdArgs() *ChatManagementServiceGetChatListByIdArgs {
	return &ChatManagementServiceGetChatListByIdArgs{}
}

func (p *ChatManagementServiceGetChatListByIdArgs) InitDefault() {
}

var ChatManagementServiceGetChatListByIdArgs_Req_DEFAULT *GetChatListByIdReq

func (p *ChatManagementServiceGetChatListByIdArgs) GetReq() (v *GetChatListByIdReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceGetChatListByIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceGetChatListByIdArgs) SetReq(val *GetChatListByIdReq) {
	p.Req = val
}

func (p *ChatManagementServiceGetChatListByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceGetChatListByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatListByIdArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatListByIdArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceGetChatListByIdResult struct {
	Success *GetChatListByIdResp `thrift:"success,0,optional" frugal:"0,optional,GetChatListByIdResp" json:"success,omitempty"`
}

func NewChatManagementServiceGetChatListByIdResult() *ChatManagementServiceGetChatListByIdResult {
	return &ChatManagementServiceGetChatListByIdResult{}
}

func (p *ChatManagementServiceGetChatListByIdResult) InitDefault() {
}

var ChatManagementServiceGetChatListByIdResult_Success_DEFAULT *GetChatListByIdResp

func (p *ChatManagementServiceGetChatListByIdResult) GetSuccess() (v *GetChatListByIdResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceGetChatListByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceGetChatListByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetChatListByIdResp)
}

func (p *ChatManagementServiceGetChatListByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceGetChatListByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatListByIdResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatListByIdResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceCreateChatItemArgs struct {
	Req *ChatItem `thrift:"req,1" frugal:"1,default,ChatItem" json:"req"`
}

func NewChatManagementServiceCreateChatItemArgs() *ChatManagementServiceCreateChatItemArgs {
	return &ChatManagementServiceCreateChatItemArgs{}
}

func (p *ChatManagementServiceCreateChatItemArgs) InitDefault() {
}

var ChatManagementServiceCreateChatItemArgs_Req_DEFAULT *ChatItem

func (p *ChatManagementServiceCreateChatItemArgs) GetReq() (v *ChatItem) {
	if !p.IsSetReq() {
		return ChatManagementServiceCreateChatItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceCreateChatItemArgs) SetReq(val *ChatItem) {
	p.Req = val
}

func (p *ChatManagementServiceCreateChatItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceCreateChatItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceCreateChatItemArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceCreateChatItemArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceCreateChatItemResult struct {
	Success *CreateChatItemRsp `thrift:"success,0,optional" frugal:"0,optional,CreateChatItemRsp" json:"success,omitempty"`
}

func NewChatManagementServiceCreateChatItemResult() *ChatManagementServiceCreateChatItemResult {
	return &ChatManagementServiceCreateChatItemResult{}
}

func (p *ChatManagementServiceCreateChatItemResult) InitDefault() {
}

var ChatManagementServiceCreateChatItemResult_Success_DEFAULT *CreateChatItemRsp

func (p *ChatManagementServiceCreateChatItemResult) GetSuccess() (v *CreateChatItemRsp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceCreateChatItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceCreateChatItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateChatItemRsp)
}

func (p *ChatManagementServiceCreateChatItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceCreateChatItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceCreateChatItemResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceCreateChatItemResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceUploadFileArgs struct {
	Req *UploadFileReq `thrift:"req,1" frugal:"1,default,UploadFileReq" json:"req"`
}

func NewChatManagementServiceUploadFileArgs() *ChatManagementServiceUploadFileArgs {
	return &ChatManagementServiceUploadFileArgs{}
}

func (p *ChatManagementServiceUploadFileArgs) InitDefault() {
}

var ChatManagementServiceUploadFileArgs_Req_DEFAULT *UploadFileReq

func (p *ChatManagementServiceUploadFileArgs) GetReq() (v *UploadFileReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceUploadFileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceUploadFileArgs) SetReq(val *UploadFileReq) {
	p.Req = val
}

func (p *ChatManagementServiceUploadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceUploadFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceUploadFileArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceUploadFileArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceUploadFileResult struct {
	Success *UploadFileResp `thrift:"success,0,optional" frugal:"0,optional,UploadFileResp" json:"success,omitempty"`
}

func NewChatManagementServiceUploadFileResult() *ChatManagementServiceUploadFileResult {
	return &ChatManagementServiceUploadFileResult{}
}

func (p *ChatManagementServiceUploadFileResult) InitDefault() {
}

var ChatManagementServiceUploadFileResult_Success_DEFAULT *UploadFileResp

func (p *ChatManagementServiceUploadFileResult) GetSuccess() (v *UploadFileResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceUploadFileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceUploadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadFileResp)
}

func (p *ChatManagementServiceUploadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceUploadFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceUploadFileResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceUploadFileResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceGetFileListByMessageIdArgs struct {
	Req *GetFileListByMessageIdReq `thrift:"req,1" frugal:"1,default,GetFileListByMessageIdReq" json:"req"`
}

func NewChatManagementServiceGetFileListByMessageIdArgs() *ChatManagementServiceGetFileListByMessageIdArgs {
	return &ChatManagementServiceGetFileListByMessageIdArgs{}
}

func (p *ChatManagementServiceGetFileListByMessageIdArgs) InitDefault() {
}

var ChatManagementServiceGetFileListByMessageIdArgs_Req_DEFAULT *GetFileListByMessageIdReq

func (p *ChatManagementServiceGetFileListByMessageIdArgs) GetReq() (v *GetFileListByMessageIdReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceGetFileListByMessageIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceGetFileListByMessageIdArgs) SetReq(val *GetFileListByMessageIdReq) {
	p.Req = val
}

func (p *ChatManagementServiceGetFileListByMessageIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceGetFileListByMessageIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetFileListByMessageIdArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetFileListByMessageIdArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceGetFileListByMessageIdResult struct {
	Success *GetFileListByMessageIdResp `thrift:"success,0,optional" frugal:"0,optional,GetFileListByMessageIdResp" json:"success,omitempty"`
}

func NewChatManagementServiceGetFileListByMessageIdResult() *ChatManagementServiceGetFileListByMessageIdResult {
	return &ChatManagementServiceGetFileListByMessageIdResult{}
}

func (p *ChatManagementServiceGetFileListByMessageIdResult) InitDefault() {
}

var ChatManagementServiceGetFileListByMessageIdResult_Success_DEFAULT *GetFileListByMessageIdResp

func (p *ChatManagementServiceGetFileListByMessageIdResult) GetSuccess() (v *GetFileListByMessageIdResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceGetFileListByMessageIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceGetFileListByMessageIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFileListByMessageIdResp)
}

func (p *ChatManagementServiceGetFileListByMessageIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceGetFileListByMessageIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetFileListByMessageIdResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetFileListByMessageIdResult = map[int16]string{
	0: "success",
}
