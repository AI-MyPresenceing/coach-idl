// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package manageservice

import (
	"context"
	"fmt"
	"github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/common/base"
)

type ChatItem struct {
	Id        int64    `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	SessionId string   `thrift:"session_id,2" frugal:"2,default,string" json:"session_id"`
	Role      string   `thrift:"role,3" frugal:"3,default,string" json:"role"`
	Content   string   `thrift:"content,4" frugal:"4,default,string" json:"content"`
	MessageId string   `thrift:"message_id,5" frugal:"5,default,string" json:"message_id"`
	FileIds   []string `thrift:"file_ids,6,optional" frugal:"6,optional,list<string>" json:"file_ids,omitempty"`
	ObjectId  *string  `thrift:"object_id,7,optional" frugal:"7,optional,string" json:"object_id,omitempty"`
	Title     *string  `thrift:"title,8,optional" frugal:"8,optional,string" json:"title,omitempty"`
}

func NewChatItem() *ChatItem {
	return &ChatItem{}
}

func (p *ChatItem) InitDefault() {
}

func (p *ChatItem) GetId() (v int64) {
	return p.Id
}

func (p *ChatItem) GetSessionId() (v string) {
	return p.SessionId
}

func (p *ChatItem) GetRole() (v string) {
	return p.Role
}

func (p *ChatItem) GetContent() (v string) {
	return p.Content
}

func (p *ChatItem) GetMessageId() (v string) {
	return p.MessageId
}

var ChatItem_FileIds_DEFAULT []string

func (p *ChatItem) GetFileIds() (v []string) {
	if !p.IsSetFileIds() {
		return ChatItem_FileIds_DEFAULT
	}
	return p.FileIds
}

var ChatItem_ObjectId_DEFAULT string

func (p *ChatItem) GetObjectId() (v string) {
	if !p.IsSetObjectId() {
		return ChatItem_ObjectId_DEFAULT
	}
	return *p.ObjectId
}

var ChatItem_Title_DEFAULT string

func (p *ChatItem) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return ChatItem_Title_DEFAULT
	}
	return *p.Title
}
func (p *ChatItem) SetId(val int64) {
	p.Id = val
}
func (p *ChatItem) SetSessionId(val string) {
	p.SessionId = val
}
func (p *ChatItem) SetRole(val string) {
	p.Role = val
}
func (p *ChatItem) SetContent(val string) {
	p.Content = val
}
func (p *ChatItem) SetMessageId(val string) {
	p.MessageId = val
}
func (p *ChatItem) SetFileIds(val []string) {
	p.FileIds = val
}
func (p *ChatItem) SetObjectId(val *string) {
	p.ObjectId = val
}
func (p *ChatItem) SetTitle(val *string) {
	p.Title = val
}

func (p *ChatItem) IsSetFileIds() bool {
	return p.FileIds != nil
}

func (p *ChatItem) IsSetObjectId() bool {
	return p.ObjectId != nil
}

func (p *ChatItem) IsSetTitle() bool {
	return p.Title != nil
}

func (p *ChatItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatItem(%+v)", *p)
}

var fieldIDToName_ChatItem = map[int16]string{
	1: "id",
	2: "session_id",
	3: "role",
	4: "content",
	5: "message_id",
	6: "file_ids",
	7: "object_id",
	8: "title",
}

type ChatObject struct {
	Id          string   `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Name        string   `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Avatar      string   `thrift:"avatar,3" frugal:"3,default,string" json:"avatar"`
	Position    string   `thrift:"position,4" frugal:"4,default,string" json:"position"`
	Relation    string   `thrift:"relation,5" frugal:"5,default,string" json:"relation"`
	CoreNeeds   *string  `thrift:"core_needs,6,optional" frugal:"6,optional,string" json:"core_needs,omitempty"`
	Personality *string  `thrift:"personality,7,optional" frugal:"7,optional,string" json:"personality,omitempty"`
	Tags        []string `thrift:"tags,8,optional" frugal:"8,optional,list<string>" json:"tags,omitempty"`
	UserId      string   `thrift:"userId,9,required" frugal:"9,required,string" json:"userId"`
	HasHistory  bool     `thrift:"has_history,10" frugal:"10,default,bool" json:"has_history"`
}

func NewChatObject() *ChatObject {
	return &ChatObject{}
}

func (p *ChatObject) InitDefault() {
}

func (p *ChatObject) GetId() (v string) {
	return p.Id
}

func (p *ChatObject) GetName() (v string) {
	return p.Name
}

func (p *ChatObject) GetAvatar() (v string) {
	return p.Avatar
}

func (p *ChatObject) GetPosition() (v string) {
	return p.Position
}

func (p *ChatObject) GetRelation() (v string) {
	return p.Relation
}

var ChatObject_CoreNeeds_DEFAULT string

func (p *ChatObject) GetCoreNeeds() (v string) {
	if !p.IsSetCoreNeeds() {
		return ChatObject_CoreNeeds_DEFAULT
	}
	return *p.CoreNeeds
}

var ChatObject_Personality_DEFAULT string

func (p *ChatObject) GetPersonality() (v string) {
	if !p.IsSetPersonality() {
		return ChatObject_Personality_DEFAULT
	}
	return *p.Personality
}

var ChatObject_Tags_DEFAULT []string

func (p *ChatObject) GetTags() (v []string) {
	if !p.IsSetTags() {
		return ChatObject_Tags_DEFAULT
	}
	return p.Tags
}

func (p *ChatObject) GetUserId() (v string) {
	return p.UserId
}

func (p *ChatObject) GetHasHistory() (v bool) {
	return p.HasHistory
}
func (p *ChatObject) SetId(val string) {
	p.Id = val
}
func (p *ChatObject) SetName(val string) {
	p.Name = val
}
func (p *ChatObject) SetAvatar(val string) {
	p.Avatar = val
}
func (p *ChatObject) SetPosition(val string) {
	p.Position = val
}
func (p *ChatObject) SetRelation(val string) {
	p.Relation = val
}
func (p *ChatObject) SetCoreNeeds(val *string) {
	p.CoreNeeds = val
}
func (p *ChatObject) SetPersonality(val *string) {
	p.Personality = val
}
func (p *ChatObject) SetTags(val []string) {
	p.Tags = val
}
func (p *ChatObject) SetUserId(val string) {
	p.UserId = val
}
func (p *ChatObject) SetHasHistory(val bool) {
	p.HasHistory = val
}

func (p *ChatObject) IsSetCoreNeeds() bool {
	return p.CoreNeeds != nil
}

func (p *ChatObject) IsSetPersonality() bool {
	return p.Personality != nil
}

func (p *ChatObject) IsSetTags() bool {
	return p.Tags != nil
}

func (p *ChatObject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatObject(%+v)", *p)
}

var fieldIDToName_ChatObject = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "avatar",
	4:  "position",
	5:  "relation",
	6:  "core_needs",
	7:  "personality",
	8:  "tags",
	9:  "userId",
	10: "has_history",
}

type FileItem struct {
	FileId   string `thrift:"file_id,1" frugal:"1,default,string" json:"file_id"`
	FileUrl  string `thrift:"file_url,2" frugal:"2,default,string" json:"file_url"`
	FileName string `thrift:"file_name,3" frugal:"3,default,string" json:"file_name"`
	FileType string `thrift:"file_type,4" frugal:"4,default,string" json:"file_type"`
	FileSize int64  `thrift:"file_size,5" frugal:"5,default,i64" json:"file_size"`
}

func NewFileItem() *FileItem {
	return &FileItem{}
}

func (p *FileItem) InitDefault() {
}

func (p *FileItem) GetFileId() (v string) {
	return p.FileId
}

func (p *FileItem) GetFileUrl() (v string) {
	return p.FileUrl
}

func (p *FileItem) GetFileName() (v string) {
	return p.FileName
}

func (p *FileItem) GetFileType() (v string) {
	return p.FileType
}

func (p *FileItem) GetFileSize() (v int64) {
	return p.FileSize
}
func (p *FileItem) SetFileId(val string) {
	p.FileId = val
}
func (p *FileItem) SetFileUrl(val string) {
	p.FileUrl = val
}
func (p *FileItem) SetFileName(val string) {
	p.FileName = val
}
func (p *FileItem) SetFileType(val string) {
	p.FileType = val
}
func (p *FileItem) SetFileSize(val int64) {
	p.FileSize = val
}

func (p *FileItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileItem(%+v)", *p)
}

var fieldIDToName_FileItem = map[int16]string{
	1: "file_id",
	2: "file_url",
	3: "file_name",
	4: "file_type",
	5: "file_size",
}

type GetChatObjectListReq struct {
	UserId string `thrift:"user_id,1,required" frugal:"1,required,string" json:"user_id"`
}

func NewGetChatObjectListReq() *GetChatObjectListReq {
	return &GetChatObjectListReq{}
}

func (p *GetChatObjectListReq) InitDefault() {
}

func (p *GetChatObjectListReq) GetUserId() (v string) {
	return p.UserId
}
func (p *GetChatObjectListReq) SetUserId(val string) {
	p.UserId = val
}

func (p *GetChatObjectListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatObjectListReq(%+v)", *p)
}

var fieldIDToName_GetChatObjectListReq = map[int16]string{
	1: "user_id",
}

type GetChatObjectListResp struct {
	ChatObjectList []*ChatObject  `thrift:"chat_object_list,1" frugal:"1,default,list<ChatObject>" json:"chat_object_list"`
	BaseResp       *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetChatObjectListResp() *GetChatObjectListResp {
	return &GetChatObjectListResp{}
}

func (p *GetChatObjectListResp) InitDefault() {
}

func (p *GetChatObjectListResp) GetChatObjectList() (v []*ChatObject) {
	return p.ChatObjectList
}

var GetChatObjectListResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetChatObjectListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetChatObjectListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetChatObjectListResp) SetChatObjectList(val []*ChatObject) {
	p.ChatObjectList = val
}
func (p *GetChatObjectListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetChatObjectListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetChatObjectListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatObjectListResp(%+v)", *p)
}

var fieldIDToName_GetChatObjectListResp = map[int16]string{
	1:   "chat_object_list",
	255: "baseResp",
}

type GetChatListByIdReq struct {
	SessionId string `thrift:"session_id,1,required" frugal:"1,required,string" json:"session_id"`
}

func NewGetChatListByIdReq() *GetChatListByIdReq {
	return &GetChatListByIdReq{}
}

func (p *GetChatListByIdReq) InitDefault() {
}

func (p *GetChatListByIdReq) GetSessionId() (v string) {
	return p.SessionId
}
func (p *GetChatListByIdReq) SetSessionId(val string) {
	p.SessionId = val
}

func (p *GetChatListByIdReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatListByIdReq(%+v)", *p)
}

var fieldIDToName_GetChatListByIdReq = map[int16]string{
	1: "session_id",
}

type GetChatListByIdResp struct {
	ChatList []*ChatItem    `thrift:"chat_list,1" frugal:"1,default,list<ChatItem>" json:"chat_list"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetChatListByIdResp() *GetChatListByIdResp {
	return &GetChatListByIdResp{}
}

func (p *GetChatListByIdResp) InitDefault() {
}

func (p *GetChatListByIdResp) GetChatList() (v []*ChatItem) {
	return p.ChatList
}

var GetChatListByIdResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetChatListByIdResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetChatListByIdResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetChatListByIdResp) SetChatList(val []*ChatItem) {
	p.ChatList = val
}
func (p *GetChatListByIdResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetChatListByIdResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetChatListByIdResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatListByIdResp(%+v)", *p)
}

var fieldIDToName_GetChatListByIdResp = map[int16]string{
	1:   "chat_list",
	255: "baseResp",
}

type CreateChatItemRsp struct {
	SessionId string         `thrift:"session_id,1" frugal:"1,default,string" json:"session_id"`
	MessageId string         `thrift:"message_id,2" frugal:"2,default,string" json:"message_id"`
	BaseResp  *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewCreateChatItemRsp() *CreateChatItemRsp {
	return &CreateChatItemRsp{}
}

func (p *CreateChatItemRsp) InitDefault() {
}

func (p *CreateChatItemRsp) GetSessionId() (v string) {
	return p.SessionId
}

func (p *CreateChatItemRsp) GetMessageId() (v string) {
	return p.MessageId
}

var CreateChatItemRsp_BaseResp_DEFAULT *base.BaseResp

func (p *CreateChatItemRsp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateChatItemRsp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateChatItemRsp) SetSessionId(val string) {
	p.SessionId = val
}
func (p *CreateChatItemRsp) SetMessageId(val string) {
	p.MessageId = val
}
func (p *CreateChatItemRsp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *CreateChatItemRsp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateChatItemRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatItemRsp(%+v)", *p)
}

var fieldIDToName_CreateChatItemRsp = map[int16]string{
	1:   "session_id",
	2:   "message_id",
	255: "baseResp",
}

type ChatSessionDTO struct {
	Id        int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	SessionId string `thrift:"session_id,2" frugal:"2,default,string" json:"session_id"`
	Title     string `thrift:"title,3" frugal:"3,default,string" json:"title"`
	Status    string `thrift:"status,4" frugal:"4,default,string" json:"status"`
	CreatedAt string `thrift:"created_at,5" frugal:"5,default,string" json:"created_at"`
	UpdatedAt string `thrift:"updated_at,6" frugal:"6,default,string" json:"updated_at"`
}

func NewChatSessionDTO() *ChatSessionDTO {
	return &ChatSessionDTO{}
}

func (p *ChatSessionDTO) InitDefault() {
}

func (p *ChatSessionDTO) GetId() (v int64) {
	return p.Id
}

func (p *ChatSessionDTO) GetSessionId() (v string) {
	return p.SessionId
}

func (p *ChatSessionDTO) GetTitle() (v string) {
	return p.Title
}

func (p *ChatSessionDTO) GetStatus() (v string) {
	return p.Status
}

func (p *ChatSessionDTO) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *ChatSessionDTO) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *ChatSessionDTO) SetId(val int64) {
	p.Id = val
}
func (p *ChatSessionDTO) SetSessionId(val string) {
	p.SessionId = val
}
func (p *ChatSessionDTO) SetTitle(val string) {
	p.Title = val
}
func (p *ChatSessionDTO) SetStatus(val string) {
	p.Status = val
}
func (p *ChatSessionDTO) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *ChatSessionDTO) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

func (p *ChatSessionDTO) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatSessionDTO(%+v)", *p)
}

var fieldIDToName_ChatSessionDTO = map[int16]string{
	1: "id",
	2: "session_id",
	3: "title",
	4: "status",
	5: "created_at",
	6: "updated_at",
}

type CreateChatSessionReq struct {
	Title        string   `thrift:"title,1,required" frugal:"1,required,string" json:"title"`
	ObjectId     string   `thrift:"object_id,2,required" frugal:"2,required,string" json:"object_id"`
	PersonaName  *string  `thrift:"persona_name,3,optional" frugal:"3,optional,string" json:"persona_name,omitempty"`
	Goal         *string  `thrift:"goal,4,optional" frugal:"4,optional,string" json:"goal,omitempty"`
	UserQuery    *string  `thrift:"user_query,5,optional" frugal:"5,optional,string" json:"user_query,omitempty"`
	Personality  *string  `thrift:"personality,6,optional" frugal:"6,optional,string" json:"personality,omitempty"`
	Relationship *string  `thrift:"relationship,7,optional" frugal:"7,optional,string" json:"relationship,omitempty"`
	FileIds      []string `thrift:"file_ids,8,optional" frugal:"8,optional,list<string>" json:"file_ids,omitempty"`
}

func NewCreateChatSessionReq() *CreateChatSessionReq {
	return &CreateChatSessionReq{}
}

func (p *CreateChatSessionReq) InitDefault() {
}

func (p *CreateChatSessionReq) GetTitle() (v string) {
	return p.Title
}

func (p *CreateChatSessionReq) GetObjectId() (v string) {
	return p.ObjectId
}

var CreateChatSessionReq_PersonaName_DEFAULT string

func (p *CreateChatSessionReq) GetPersonaName() (v string) {
	if !p.IsSetPersonaName() {
		return CreateChatSessionReq_PersonaName_DEFAULT
	}
	return *p.PersonaName
}

var CreateChatSessionReq_Goal_DEFAULT string

func (p *CreateChatSessionReq) GetGoal() (v string) {
	if !p.IsSetGoal() {
		return CreateChatSessionReq_Goal_DEFAULT
	}
	return *p.Goal
}

var CreateChatSessionReq_UserQuery_DEFAULT string

func (p *CreateChatSessionReq) GetUserQuery() (v string) {
	if !p.IsSetUserQuery() {
		return CreateChatSessionReq_UserQuery_DEFAULT
	}
	return *p.UserQuery
}

var CreateChatSessionReq_Personality_DEFAULT string

func (p *CreateChatSessionReq) GetPersonality() (v string) {
	if !p.IsSetPersonality() {
		return CreateChatSessionReq_Personality_DEFAULT
	}
	return *p.Personality
}

var CreateChatSessionReq_Relationship_DEFAULT string

func (p *CreateChatSessionReq) GetRelationship() (v string) {
	if !p.IsSetRelationship() {
		return CreateChatSessionReq_Relationship_DEFAULT
	}
	return *p.Relationship
}

var CreateChatSessionReq_FileIds_DEFAULT []string

func (p *CreateChatSessionReq) GetFileIds() (v []string) {
	if !p.IsSetFileIds() {
		return CreateChatSessionReq_FileIds_DEFAULT
	}
	return p.FileIds
}
func (p *CreateChatSessionReq) SetTitle(val string) {
	p.Title = val
}
func (p *CreateChatSessionReq) SetObjectId(val string) {
	p.ObjectId = val
}
func (p *CreateChatSessionReq) SetPersonaName(val *string) {
	p.PersonaName = val
}
func (p *CreateChatSessionReq) SetGoal(val *string) {
	p.Goal = val
}
func (p *CreateChatSessionReq) SetUserQuery(val *string) {
	p.UserQuery = val
}
func (p *CreateChatSessionReq) SetPersonality(val *string) {
	p.Personality = val
}
func (p *CreateChatSessionReq) SetRelationship(val *string) {
	p.Relationship = val
}
func (p *CreateChatSessionReq) SetFileIds(val []string) {
	p.FileIds = val
}

func (p *CreateChatSessionReq) IsSetPersonaName() bool {
	return p.PersonaName != nil
}

func (p *CreateChatSessionReq) IsSetGoal() bool {
	return p.Goal != nil
}

func (p *CreateChatSessionReq) IsSetUserQuery() bool {
	return p.UserQuery != nil
}

func (p *CreateChatSessionReq) IsSetPersonality() bool {
	return p.Personality != nil
}

func (p *CreateChatSessionReq) IsSetRelationship() bool {
	return p.Relationship != nil
}

func (p *CreateChatSessionReq) IsSetFileIds() bool {
	return p.FileIds != nil
}

func (p *CreateChatSessionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatSessionReq(%+v)", *p)
}

var fieldIDToName_CreateChatSessionReq = map[int16]string{
	1: "title",
	2: "object_id",
	3: "persona_name",
	4: "goal",
	5: "user_query",
	6: "personality",
	7: "relationship",
	8: "file_ids",
}

type CreateChatSessionResp struct {
	SessionId string         `thrift:"session_id,1" frugal:"1,default,string" json:"session_id"`
	Title     string         `thrift:"title,2" frugal:"2,default,string" json:"title"`
	ObjectId  string         `thrift:"object_id,3" frugal:"3,default,string" json:"object_id"`
	CreatedAt string         `thrift:"created_at,4" frugal:"4,default,string" json:"created_at"`
	BaseResp  *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewCreateChatSessionResp() *CreateChatSessionResp {
	return &CreateChatSessionResp{}
}

func (p *CreateChatSessionResp) InitDefault() {
}

func (p *CreateChatSessionResp) GetSessionId() (v string) {
	return p.SessionId
}

func (p *CreateChatSessionResp) GetTitle() (v string) {
	return p.Title
}

func (p *CreateChatSessionResp) GetObjectId() (v string) {
	return p.ObjectId
}

func (p *CreateChatSessionResp) GetCreatedAt() (v string) {
	return p.CreatedAt
}

var CreateChatSessionResp_BaseResp_DEFAULT *base.BaseResp

func (p *CreateChatSessionResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateChatSessionResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateChatSessionResp) SetSessionId(val string) {
	p.SessionId = val
}
func (p *CreateChatSessionResp) SetTitle(val string) {
	p.Title = val
}
func (p *CreateChatSessionResp) SetObjectId(val string) {
	p.ObjectId = val
}
func (p *CreateChatSessionResp) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *CreateChatSessionResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *CreateChatSessionResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateChatSessionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatSessionResp(%+v)", *p)
}

var fieldIDToName_CreateChatSessionResp = map[int16]string{
	1:   "session_id",
	2:   "title",
	3:   "object_id",
	4:   "created_at",
	255: "baseResp",
}

type GetChatSessionListReq struct {
	ObjectId *string `thrift:"object_id,1,optional" frugal:"1,optional,string" json:"object_id,omitempty"`
}

func NewGetChatSessionListReq() *GetChatSessionListReq {
	return &GetChatSessionListReq{}
}

func (p *GetChatSessionListReq) InitDefault() {
}

var GetChatSessionListReq_ObjectId_DEFAULT string

func (p *GetChatSessionListReq) GetObjectId() (v string) {
	if !p.IsSetObjectId() {
		return GetChatSessionListReq_ObjectId_DEFAULT
	}
	return *p.ObjectId
}
func (p *GetChatSessionListReq) SetObjectId(val *string) {
	p.ObjectId = val
}

func (p *GetChatSessionListReq) IsSetObjectId() bool {
	return p.ObjectId != nil
}

func (p *GetChatSessionListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatSessionListReq(%+v)", *p)
}

var fieldIDToName_GetChatSessionListReq = map[int16]string{
	1: "object_id",
}

type GetChatSessionListResp struct {
	Sessions []*ChatSessionDTO `thrift:"sessions,1" frugal:"1,default,list<ChatSessionDTO>" json:"sessions"`
	BaseResp *base.BaseResp    `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetChatSessionListResp() *GetChatSessionListResp {
	return &GetChatSessionListResp{}
}

func (p *GetChatSessionListResp) InitDefault() {
}

func (p *GetChatSessionListResp) GetSessions() (v []*ChatSessionDTO) {
	return p.Sessions
}

var GetChatSessionListResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetChatSessionListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetChatSessionListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetChatSessionListResp) SetSessions(val []*ChatSessionDTO) {
	p.Sessions = val
}
func (p *GetChatSessionListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetChatSessionListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetChatSessionListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatSessionListResp(%+v)", *p)
}

var fieldIDToName_GetChatSessionListResp = map[int16]string{
	1:   "sessions",
	255: "baseResp",
}

type UploadFileReq struct {
	MessageId string `thrift:"message_id,1,required" frugal:"1,required,string" json:"message_id"`
	FileData  []byte `thrift:"file_data,2,required" frugal:"2,required,binary" json:"file_data"`
	FileName  string `thrift:"file_name,3,required" frugal:"3,required,string" json:"file_name"`
	FileType  string `thrift:"file_type,4,required" frugal:"4,required,string" json:"file_type"`
}

func NewUploadFileReq() *UploadFileReq {
	return &UploadFileReq{}
}

func (p *UploadFileReq) InitDefault() {
}

func (p *UploadFileReq) GetMessageId() (v string) {
	return p.MessageId
}

func (p *UploadFileReq) GetFileData() (v []byte) {
	return p.FileData
}

func (p *UploadFileReq) GetFileName() (v string) {
	return p.FileName
}

func (p *UploadFileReq) GetFileType() (v string) {
	return p.FileType
}
func (p *UploadFileReq) SetMessageId(val string) {
	p.MessageId = val
}
func (p *UploadFileReq) SetFileData(val []byte) {
	p.FileData = val
}
func (p *UploadFileReq) SetFileName(val string) {
	p.FileName = val
}
func (p *UploadFileReq) SetFileType(val string) {
	p.FileType = val
}

func (p *UploadFileReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadFileReq(%+v)", *p)
}

var fieldIDToName_UploadFileReq = map[int16]string{
	1: "message_id",
	2: "file_data",
	3: "file_name",
	4: "file_type",
}

type UploadFileResp struct {
	FileId   string         `thrift:"file_id,1" frugal:"1,default,string" json:"file_id"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewUploadFileResp() *UploadFileResp {
	return &UploadFileResp{}
}

func (p *UploadFileResp) InitDefault() {
}

func (p *UploadFileResp) GetFileId() (v string) {
	return p.FileId
}

var UploadFileResp_BaseResp_DEFAULT *base.BaseResp

func (p *UploadFileResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return UploadFileResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UploadFileResp) SetFileId(val string) {
	p.FileId = val
}
func (p *UploadFileResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *UploadFileResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UploadFileResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadFileResp(%+v)", *p)
}

var fieldIDToName_UploadFileResp = map[int16]string{
	1:   "file_id",
	255: "baseResp",
}

type GetFileListByMessageIdReq struct {
	MessageId string `thrift:"message_id,1,required" frugal:"1,required,string" json:"message_id"`
}

func NewGetFileListByMessageIdReq() *GetFileListByMessageIdReq {
	return &GetFileListByMessageIdReq{}
}

func (p *GetFileListByMessageIdReq) InitDefault() {
}

func (p *GetFileListByMessageIdReq) GetMessageId() (v string) {
	return p.MessageId
}
func (p *GetFileListByMessageIdReq) SetMessageId(val string) {
	p.MessageId = val
}

func (p *GetFileListByMessageIdReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFileListByMessageIdReq(%+v)", *p)
}

var fieldIDToName_GetFileListByMessageIdReq = map[int16]string{
	1: "message_id",
}

type GetFileListByMessageIdResp struct {
	FileList []*FileItem    `thrift:"file_list,1" frugal:"1,default,list<FileItem>" json:"file_list"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetFileListByMessageIdResp() *GetFileListByMessageIdResp {
	return &GetFileListByMessageIdResp{}
}

func (p *GetFileListByMessageIdResp) InitDefault() {
}

func (p *GetFileListByMessageIdResp) GetFileList() (v []*FileItem) {
	return p.FileList
}

var GetFileListByMessageIdResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetFileListByMessageIdResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetFileListByMessageIdResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetFileListByMessageIdResp) SetFileList(val []*FileItem) {
	p.FileList = val
}
func (p *GetFileListByMessageIdResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetFileListByMessageIdResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetFileListByMessageIdResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFileListByMessageIdResp(%+v)", *p)
}

var fieldIDToName_GetFileListByMessageIdResp = map[int16]string{
	1:   "file_list",
	255: "baseResp",
}

type DeleteChatObjectReq struct {
	Id     string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	UserId string `thrift:"user_id,2,required" frugal:"2,required,string" json:"user_id"`
}

func NewDeleteChatObjectReq() *DeleteChatObjectReq {
	return &DeleteChatObjectReq{}
}

func (p *DeleteChatObjectReq) InitDefault() {
}

func (p *DeleteChatObjectReq) GetId() (v string) {
	return p.Id
}

func (p *DeleteChatObjectReq) GetUserId() (v string) {
	return p.UserId
}
func (p *DeleteChatObjectReq) SetId(val string) {
	p.Id = val
}
func (p *DeleteChatObjectReq) SetUserId(val string) {
	p.UserId = val
}

func (p *DeleteChatObjectReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteChatObjectReq(%+v)", *p)
}

var fieldIDToName_DeleteChatObjectReq = map[int16]string{
	1: "id",
	2: "user_id",
}

type DeleteChatObjectResp struct {
	Success  bool           `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewDeleteChatObjectResp() *DeleteChatObjectResp {
	return &DeleteChatObjectResp{}
}

func (p *DeleteChatObjectResp) InitDefault() {
}

func (p *DeleteChatObjectResp) GetSuccess() (v bool) {
	return p.Success
}

var DeleteChatObjectResp_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteChatObjectResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return DeleteChatObjectResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteChatObjectResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *DeleteChatObjectResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *DeleteChatObjectResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteChatObjectResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteChatObjectResp(%+v)", *p)
}

var fieldIDToName_DeleteChatObjectResp = map[int16]string{
	1:   "success",
	255: "baseResp",
}

type ChatManagementService interface {
	GetChatObjectList(ctx context.Context, req *GetChatObjectListReq) (r *GetChatObjectListResp, err error)

	EditChatObject(ctx context.Context, req *ChatObject) (r *base.BaseResp, err error)

	GetChatListById(ctx context.Context, req *GetChatListByIdReq) (r *GetChatListByIdResp, err error)

	CreateChatItem(ctx context.Context, req *ChatItem) (r *CreateChatItemRsp, err error)

	CreateChatSession(ctx context.Context, req *CreateChatSessionReq) (r *CreateChatSessionResp, err error)

	UploadFile(ctx context.Context, req *UploadFileReq) (r *UploadFileResp, err error)

	GetFileListByMessageId(ctx context.Context, req *GetFileListByMessageIdReq) (r *GetFileListByMessageIdResp, err error)

	DeleteChatObject(ctx context.Context, req *DeleteChatObjectReq) (r *DeleteChatObjectResp, err error)

	GetChatSessionList(ctx context.Context, req *GetChatSessionListReq) (r *GetChatSessionListResp, err error)
}

type ChatManagementServiceGetChatObjectListArgs struct {
	Req *GetChatObjectListReq `thrift:"req,1" frugal:"1,default,GetChatObjectListReq" json:"req"`
}

func NewChatManagementServiceGetChatObjectListArgs() *ChatManagementServiceGetChatObjectListArgs {
	return &ChatManagementServiceGetChatObjectListArgs{}
}

func (p *ChatManagementServiceGetChatObjectListArgs) InitDefault() {
}

var ChatManagementServiceGetChatObjectListArgs_Req_DEFAULT *GetChatObjectListReq

func (p *ChatManagementServiceGetChatObjectListArgs) GetReq() (v *GetChatObjectListReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceGetChatObjectListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceGetChatObjectListArgs) SetReq(val *GetChatObjectListReq) {
	p.Req = val
}

func (p *ChatManagementServiceGetChatObjectListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceGetChatObjectListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatObjectListArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatObjectListArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceGetChatObjectListResult struct {
	Success *GetChatObjectListResp `thrift:"success,0,optional" frugal:"0,optional,GetChatObjectListResp" json:"success,omitempty"`
}

func NewChatManagementServiceGetChatObjectListResult() *ChatManagementServiceGetChatObjectListResult {
	return &ChatManagementServiceGetChatObjectListResult{}
}

func (p *ChatManagementServiceGetChatObjectListResult) InitDefault() {
}

var ChatManagementServiceGetChatObjectListResult_Success_DEFAULT *GetChatObjectListResp

func (p *ChatManagementServiceGetChatObjectListResult) GetSuccess() (v *GetChatObjectListResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceGetChatObjectListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceGetChatObjectListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetChatObjectListResp)
}

func (p *ChatManagementServiceGetChatObjectListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceGetChatObjectListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatObjectListResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatObjectListResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceEditChatObjectArgs struct {
	Req *ChatObject `thrift:"req,1" frugal:"1,default,ChatObject" json:"req"`
}

func NewChatManagementServiceEditChatObjectArgs() *ChatManagementServiceEditChatObjectArgs {
	return &ChatManagementServiceEditChatObjectArgs{}
}

func (p *ChatManagementServiceEditChatObjectArgs) InitDefault() {
}

var ChatManagementServiceEditChatObjectArgs_Req_DEFAULT *ChatObject

func (p *ChatManagementServiceEditChatObjectArgs) GetReq() (v *ChatObject) {
	if !p.IsSetReq() {
		return ChatManagementServiceEditChatObjectArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceEditChatObjectArgs) SetReq(val *ChatObject) {
	p.Req = val
}

func (p *ChatManagementServiceEditChatObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceEditChatObjectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceEditChatObjectArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceEditChatObjectArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceEditChatObjectResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewChatManagementServiceEditChatObjectResult() *ChatManagementServiceEditChatObjectResult {
	return &ChatManagementServiceEditChatObjectResult{}
}

func (p *ChatManagementServiceEditChatObjectResult) InitDefault() {
}

var ChatManagementServiceEditChatObjectResult_Success_DEFAULT *base.BaseResp

func (p *ChatManagementServiceEditChatObjectResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceEditChatObjectResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceEditChatObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *ChatManagementServiceEditChatObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceEditChatObjectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceEditChatObjectResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceEditChatObjectResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceGetChatListByIdArgs struct {
	Req *GetChatListByIdReq `thrift:"req,1" frugal:"1,default,GetChatListByIdReq" json:"req"`
}

func NewChatManagementServiceGetChatListByIdArgs() *ChatManagementServiceGetChatListByIdArgs {
	return &ChatManagementServiceGetChatListByIdArgs{}
}

func (p *ChatManagementServiceGetChatListByIdArgs) InitDefault() {
}

var ChatManagementServiceGetChatListByIdArgs_Req_DEFAULT *GetChatListByIdReq

func (p *ChatManagementServiceGetChatListByIdArgs) GetReq() (v *GetChatListByIdReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceGetChatListByIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceGetChatListByIdArgs) SetReq(val *GetChatListByIdReq) {
	p.Req = val
}

func (p *ChatManagementServiceGetChatListByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceGetChatListByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatListByIdArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatListByIdArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceGetChatListByIdResult struct {
	Success *GetChatListByIdResp `thrift:"success,0,optional" frugal:"0,optional,GetChatListByIdResp" json:"success,omitempty"`
}

func NewChatManagementServiceGetChatListByIdResult() *ChatManagementServiceGetChatListByIdResult {
	return &ChatManagementServiceGetChatListByIdResult{}
}

func (p *ChatManagementServiceGetChatListByIdResult) InitDefault() {
}

var ChatManagementServiceGetChatListByIdResult_Success_DEFAULT *GetChatListByIdResp

func (p *ChatManagementServiceGetChatListByIdResult) GetSuccess() (v *GetChatListByIdResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceGetChatListByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceGetChatListByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetChatListByIdResp)
}

func (p *ChatManagementServiceGetChatListByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceGetChatListByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatListByIdResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatListByIdResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceCreateChatItemArgs struct {
	Req *ChatItem `thrift:"req,1" frugal:"1,default,ChatItem" json:"req"`
}

func NewChatManagementServiceCreateChatItemArgs() *ChatManagementServiceCreateChatItemArgs {
	return &ChatManagementServiceCreateChatItemArgs{}
}

func (p *ChatManagementServiceCreateChatItemArgs) InitDefault() {
}

var ChatManagementServiceCreateChatItemArgs_Req_DEFAULT *ChatItem

func (p *ChatManagementServiceCreateChatItemArgs) GetReq() (v *ChatItem) {
	if !p.IsSetReq() {
		return ChatManagementServiceCreateChatItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceCreateChatItemArgs) SetReq(val *ChatItem) {
	p.Req = val
}

func (p *ChatManagementServiceCreateChatItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceCreateChatItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceCreateChatItemArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceCreateChatItemArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceCreateChatItemResult struct {
	Success *CreateChatItemRsp `thrift:"success,0,optional" frugal:"0,optional,CreateChatItemRsp" json:"success,omitempty"`
}

func NewChatManagementServiceCreateChatItemResult() *ChatManagementServiceCreateChatItemResult {
	return &ChatManagementServiceCreateChatItemResult{}
}

func (p *ChatManagementServiceCreateChatItemResult) InitDefault() {
}

var ChatManagementServiceCreateChatItemResult_Success_DEFAULT *CreateChatItemRsp

func (p *ChatManagementServiceCreateChatItemResult) GetSuccess() (v *CreateChatItemRsp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceCreateChatItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceCreateChatItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateChatItemRsp)
}

func (p *ChatManagementServiceCreateChatItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceCreateChatItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceCreateChatItemResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceCreateChatItemResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceCreateChatSessionArgs struct {
	Req *CreateChatSessionReq `thrift:"req,1" frugal:"1,default,CreateChatSessionReq" json:"req"`
}

func NewChatManagementServiceCreateChatSessionArgs() *ChatManagementServiceCreateChatSessionArgs {
	return &ChatManagementServiceCreateChatSessionArgs{}
}

func (p *ChatManagementServiceCreateChatSessionArgs) InitDefault() {
}

var ChatManagementServiceCreateChatSessionArgs_Req_DEFAULT *CreateChatSessionReq

func (p *ChatManagementServiceCreateChatSessionArgs) GetReq() (v *CreateChatSessionReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceCreateChatSessionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceCreateChatSessionArgs) SetReq(val *CreateChatSessionReq) {
	p.Req = val
}

func (p *ChatManagementServiceCreateChatSessionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceCreateChatSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceCreateChatSessionArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceCreateChatSessionArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceCreateChatSessionResult struct {
	Success *CreateChatSessionResp `thrift:"success,0,optional" frugal:"0,optional,CreateChatSessionResp" json:"success,omitempty"`
}

func NewChatManagementServiceCreateChatSessionResult() *ChatManagementServiceCreateChatSessionResult {
	return &ChatManagementServiceCreateChatSessionResult{}
}

func (p *ChatManagementServiceCreateChatSessionResult) InitDefault() {
}

var ChatManagementServiceCreateChatSessionResult_Success_DEFAULT *CreateChatSessionResp

func (p *ChatManagementServiceCreateChatSessionResult) GetSuccess() (v *CreateChatSessionResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceCreateChatSessionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceCreateChatSessionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateChatSessionResp)
}

func (p *ChatManagementServiceCreateChatSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceCreateChatSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceCreateChatSessionResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceCreateChatSessionResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceUploadFileArgs struct {
	Req *UploadFileReq `thrift:"req,1" frugal:"1,default,UploadFileReq" json:"req"`
}

func NewChatManagementServiceUploadFileArgs() *ChatManagementServiceUploadFileArgs {
	return &ChatManagementServiceUploadFileArgs{}
}

func (p *ChatManagementServiceUploadFileArgs) InitDefault() {
}

var ChatManagementServiceUploadFileArgs_Req_DEFAULT *UploadFileReq

func (p *ChatManagementServiceUploadFileArgs) GetReq() (v *UploadFileReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceUploadFileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceUploadFileArgs) SetReq(val *UploadFileReq) {
	p.Req = val
}

func (p *ChatManagementServiceUploadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceUploadFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceUploadFileArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceUploadFileArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceUploadFileResult struct {
	Success *UploadFileResp `thrift:"success,0,optional" frugal:"0,optional,UploadFileResp" json:"success,omitempty"`
}

func NewChatManagementServiceUploadFileResult() *ChatManagementServiceUploadFileResult {
	return &ChatManagementServiceUploadFileResult{}
}

func (p *ChatManagementServiceUploadFileResult) InitDefault() {
}

var ChatManagementServiceUploadFileResult_Success_DEFAULT *UploadFileResp

func (p *ChatManagementServiceUploadFileResult) GetSuccess() (v *UploadFileResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceUploadFileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceUploadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadFileResp)
}

func (p *ChatManagementServiceUploadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceUploadFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceUploadFileResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceUploadFileResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceGetFileListByMessageIdArgs struct {
	Req *GetFileListByMessageIdReq `thrift:"req,1" frugal:"1,default,GetFileListByMessageIdReq" json:"req"`
}

func NewChatManagementServiceGetFileListByMessageIdArgs() *ChatManagementServiceGetFileListByMessageIdArgs {
	return &ChatManagementServiceGetFileListByMessageIdArgs{}
}

func (p *ChatManagementServiceGetFileListByMessageIdArgs) InitDefault() {
}

var ChatManagementServiceGetFileListByMessageIdArgs_Req_DEFAULT *GetFileListByMessageIdReq

func (p *ChatManagementServiceGetFileListByMessageIdArgs) GetReq() (v *GetFileListByMessageIdReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceGetFileListByMessageIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceGetFileListByMessageIdArgs) SetReq(val *GetFileListByMessageIdReq) {
	p.Req = val
}

func (p *ChatManagementServiceGetFileListByMessageIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceGetFileListByMessageIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetFileListByMessageIdArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetFileListByMessageIdArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceGetFileListByMessageIdResult struct {
	Success *GetFileListByMessageIdResp `thrift:"success,0,optional" frugal:"0,optional,GetFileListByMessageIdResp" json:"success,omitempty"`
}

func NewChatManagementServiceGetFileListByMessageIdResult() *ChatManagementServiceGetFileListByMessageIdResult {
	return &ChatManagementServiceGetFileListByMessageIdResult{}
}

func (p *ChatManagementServiceGetFileListByMessageIdResult) InitDefault() {
}

var ChatManagementServiceGetFileListByMessageIdResult_Success_DEFAULT *GetFileListByMessageIdResp

func (p *ChatManagementServiceGetFileListByMessageIdResult) GetSuccess() (v *GetFileListByMessageIdResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceGetFileListByMessageIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceGetFileListByMessageIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFileListByMessageIdResp)
}

func (p *ChatManagementServiceGetFileListByMessageIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceGetFileListByMessageIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetFileListByMessageIdResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetFileListByMessageIdResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceDeleteChatObjectArgs struct {
	Req *DeleteChatObjectReq `thrift:"req,1" frugal:"1,default,DeleteChatObjectReq" json:"req"`
}

func NewChatManagementServiceDeleteChatObjectArgs() *ChatManagementServiceDeleteChatObjectArgs {
	return &ChatManagementServiceDeleteChatObjectArgs{}
}

func (p *ChatManagementServiceDeleteChatObjectArgs) InitDefault() {
}

var ChatManagementServiceDeleteChatObjectArgs_Req_DEFAULT *DeleteChatObjectReq

func (p *ChatManagementServiceDeleteChatObjectArgs) GetReq() (v *DeleteChatObjectReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceDeleteChatObjectArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceDeleteChatObjectArgs) SetReq(val *DeleteChatObjectReq) {
	p.Req = val
}

func (p *ChatManagementServiceDeleteChatObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceDeleteChatObjectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceDeleteChatObjectArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceDeleteChatObjectArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceDeleteChatObjectResult struct {
	Success *DeleteChatObjectResp `thrift:"success,0,optional" frugal:"0,optional,DeleteChatObjectResp" json:"success,omitempty"`
}

func NewChatManagementServiceDeleteChatObjectResult() *ChatManagementServiceDeleteChatObjectResult {
	return &ChatManagementServiceDeleteChatObjectResult{}
}

func (p *ChatManagementServiceDeleteChatObjectResult) InitDefault() {
}

var ChatManagementServiceDeleteChatObjectResult_Success_DEFAULT *DeleteChatObjectResp

func (p *ChatManagementServiceDeleteChatObjectResult) GetSuccess() (v *DeleteChatObjectResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceDeleteChatObjectResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceDeleteChatObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteChatObjectResp)
}

func (p *ChatManagementServiceDeleteChatObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceDeleteChatObjectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceDeleteChatObjectResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceDeleteChatObjectResult = map[int16]string{
	0: "success",
}

type ChatManagementServiceGetChatSessionListArgs struct {
	Req *GetChatSessionListReq `thrift:"req,1" frugal:"1,default,GetChatSessionListReq" json:"req"`
}

func NewChatManagementServiceGetChatSessionListArgs() *ChatManagementServiceGetChatSessionListArgs {
	return &ChatManagementServiceGetChatSessionListArgs{}
}

func (p *ChatManagementServiceGetChatSessionListArgs) InitDefault() {
}

var ChatManagementServiceGetChatSessionListArgs_Req_DEFAULT *GetChatSessionListReq

func (p *ChatManagementServiceGetChatSessionListArgs) GetReq() (v *GetChatSessionListReq) {
	if !p.IsSetReq() {
		return ChatManagementServiceGetChatSessionListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatManagementServiceGetChatSessionListArgs) SetReq(val *GetChatSessionListReq) {
	p.Req = val
}

func (p *ChatManagementServiceGetChatSessionListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatManagementServiceGetChatSessionListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatSessionListArgs(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatSessionListArgs = map[int16]string{
	1: "req",
}

type ChatManagementServiceGetChatSessionListResult struct {
	Success *GetChatSessionListResp `thrift:"success,0,optional" frugal:"0,optional,GetChatSessionListResp" json:"success,omitempty"`
}

func NewChatManagementServiceGetChatSessionListResult() *ChatManagementServiceGetChatSessionListResult {
	return &ChatManagementServiceGetChatSessionListResult{}
}

func (p *ChatManagementServiceGetChatSessionListResult) InitDefault() {
}

var ChatManagementServiceGetChatSessionListResult_Success_DEFAULT *GetChatSessionListResp

func (p *ChatManagementServiceGetChatSessionListResult) GetSuccess() (v *GetChatSessionListResp) {
	if !p.IsSetSuccess() {
		return ChatManagementServiceGetChatSessionListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatManagementServiceGetChatSessionListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetChatSessionListResp)
}

func (p *ChatManagementServiceGetChatSessionListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatManagementServiceGetChatSessionListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatManagementServiceGetChatSessionListResult(%+v)", *p)
}

var fieldIDToName_ChatManagementServiceGetChatSessionListResult = map[int16]string{
	0: "success",
}
