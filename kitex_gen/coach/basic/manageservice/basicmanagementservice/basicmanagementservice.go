// Code generated by Kitex v0.14.1. DO NOT EDIT.

package basicmanagementservice

import (
	"context"
	"errors"
	manageservice "github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/basic/manageservice"
	base "github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/common/base"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"RegisterUser": kitex.NewMethodInfo(
		registerUserHandler,
		newBasicManagementServiceRegisterUserArgs,
		newBasicManagementServiceRegisterUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserByID": kitex.NewMethodInfo(
		getUserByIDHandler,
		newBasicManagementServiceGetUserByIDArgs,
		newBasicManagementServiceGetUserByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateUser": kitex.NewMethodInfo(
		updateUserHandler,
		newBasicManagementServiceUpdateUserArgs,
		newBasicManagementServiceUpdateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LoginOrRegisterByPhone": kitex.NewMethodInfo(
		loginOrRegisterByPhoneHandler,
		newBasicManagementServiceLoginOrRegisterByPhoneArgs,
		newBasicManagementServiceLoginOrRegisterByPhoneResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserByPhone": kitex.NewMethodInfo(
		getUserByPhoneHandler,
		newBasicManagementServiceGetUserByPhoneArgs,
		newBasicManagementServiceGetUserByPhoneResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPointsBalance": kitex.NewMethodInfo(
		getPointsBalanceHandler,
		newBasicManagementServiceGetPointsBalanceArgs,
		newBasicManagementServiceGetPointsBalanceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GrantPoints": kitex.NewMethodInfo(
		grantPointsHandler,
		newBasicManagementServiceGrantPointsArgs,
		newBasicManagementServiceGrantPointsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeductPoints": kitex.NewMethodInfo(
		deductPointsHandler,
		newBasicManagementServiceDeductPointsArgs,
		newBasicManagementServiceDeductPointsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTransactionHistory": kitex.NewMethodInfo(
		getTransactionHistoryHandler,
		newBasicManagementServiceGetTransactionHistoryArgs,
		newBasicManagementServiceGetTransactionHistoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	basicManagementServiceServiceInfo                = NewServiceInfo()
	basicManagementServiceServiceInfoForClient       = NewServiceInfoForClient()
	basicManagementServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return basicManagementServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return basicManagementServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return basicManagementServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "BasicManagementService"
	handlerType := (*manageservice.BasicManagementService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "manageservice",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.BasicManagementServiceRegisterUserArgs)
	realResult := result.(*manageservice.BasicManagementServiceRegisterUserResult)
	success, err := handler.(manageservice.BasicManagementService).RegisterUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBasicManagementServiceRegisterUserArgs() interface{} {
	return manageservice.NewBasicManagementServiceRegisterUserArgs()
}

func newBasicManagementServiceRegisterUserResult() interface{} {
	return manageservice.NewBasicManagementServiceRegisterUserResult()
}

func getUserByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.BasicManagementServiceGetUserByIDArgs)
	realResult := result.(*manageservice.BasicManagementServiceGetUserByIDResult)
	success, err := handler.(manageservice.BasicManagementService).GetUserByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBasicManagementServiceGetUserByIDArgs() interface{} {
	return manageservice.NewBasicManagementServiceGetUserByIDArgs()
}

func newBasicManagementServiceGetUserByIDResult() interface{} {
	return manageservice.NewBasicManagementServiceGetUserByIDResult()
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.BasicManagementServiceUpdateUserArgs)
	realResult := result.(*manageservice.BasicManagementServiceUpdateUserResult)
	success, err := handler.(manageservice.BasicManagementService).UpdateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBasicManagementServiceUpdateUserArgs() interface{} {
	return manageservice.NewBasicManagementServiceUpdateUserArgs()
}

func newBasicManagementServiceUpdateUserResult() interface{} {
	return manageservice.NewBasicManagementServiceUpdateUserResult()
}

func loginOrRegisterByPhoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.BasicManagementServiceLoginOrRegisterByPhoneArgs)
	realResult := result.(*manageservice.BasicManagementServiceLoginOrRegisterByPhoneResult)
	success, err := handler.(manageservice.BasicManagementService).LoginOrRegisterByPhone(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBasicManagementServiceLoginOrRegisterByPhoneArgs() interface{} {
	return manageservice.NewBasicManagementServiceLoginOrRegisterByPhoneArgs()
}

func newBasicManagementServiceLoginOrRegisterByPhoneResult() interface{} {
	return manageservice.NewBasicManagementServiceLoginOrRegisterByPhoneResult()
}

func getUserByPhoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.BasicManagementServiceGetUserByPhoneArgs)
	realResult := result.(*manageservice.BasicManagementServiceGetUserByPhoneResult)
	success, err := handler.(manageservice.BasicManagementService).GetUserByPhone(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBasicManagementServiceGetUserByPhoneArgs() interface{} {
	return manageservice.NewBasicManagementServiceGetUserByPhoneArgs()
}

func newBasicManagementServiceGetUserByPhoneResult() interface{} {
	return manageservice.NewBasicManagementServiceGetUserByPhoneResult()
}

func getPointsBalanceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.BasicManagementServiceGetPointsBalanceArgs)
	realResult := result.(*manageservice.BasicManagementServiceGetPointsBalanceResult)
	success, err := handler.(manageservice.BasicManagementService).GetPointsBalance(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBasicManagementServiceGetPointsBalanceArgs() interface{} {
	return manageservice.NewBasicManagementServiceGetPointsBalanceArgs()
}

func newBasicManagementServiceGetPointsBalanceResult() interface{} {
	return manageservice.NewBasicManagementServiceGetPointsBalanceResult()
}

func grantPointsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.BasicManagementServiceGrantPointsArgs)
	realResult := result.(*manageservice.BasicManagementServiceGrantPointsResult)
	success, err := handler.(manageservice.BasicManagementService).GrantPoints(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBasicManagementServiceGrantPointsArgs() interface{} {
	return manageservice.NewBasicManagementServiceGrantPointsArgs()
}

func newBasicManagementServiceGrantPointsResult() interface{} {
	return manageservice.NewBasicManagementServiceGrantPointsResult()
}

func deductPointsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.BasicManagementServiceDeductPointsArgs)
	realResult := result.(*manageservice.BasicManagementServiceDeductPointsResult)
	success, err := handler.(manageservice.BasicManagementService).DeductPoints(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBasicManagementServiceDeductPointsArgs() interface{} {
	return manageservice.NewBasicManagementServiceDeductPointsArgs()
}

func newBasicManagementServiceDeductPointsResult() interface{} {
	return manageservice.NewBasicManagementServiceDeductPointsResult()
}

func getTransactionHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manageservice.BasicManagementServiceGetTransactionHistoryArgs)
	realResult := result.(*manageservice.BasicManagementServiceGetTransactionHistoryResult)
	success, err := handler.(manageservice.BasicManagementService).GetTransactionHistory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBasicManagementServiceGetTransactionHistoryArgs() interface{} {
	return manageservice.NewBasicManagementServiceGetTransactionHistoryArgs()
}

func newBasicManagementServiceGetTransactionHistoryResult() interface{} {
	return manageservice.NewBasicManagementServiceGetTransactionHistoryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RegisterUser(ctx context.Context, req *manageservice.RegisterUserReq) (r *manageservice.RegisterUserResp, err error) {
	var _args manageservice.BasicManagementServiceRegisterUserArgs
	_args.Req = req
	var _result manageservice.BasicManagementServiceRegisterUserResult
	if err = p.c.Call(ctx, "RegisterUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserByID(ctx context.Context, req *manageservice.GetUserByIDReq) (r *manageservice.GetUserByIDResp, err error) {
	var _args manageservice.BasicManagementServiceGetUserByIDArgs
	_args.Req = req
	var _result manageservice.BasicManagementServiceGetUserByIDResult
	if err = p.c.Call(ctx, "GetUserByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, req *manageservice.UpdateUserReq) (r *base.BaseResp, err error) {
	var _args manageservice.BasicManagementServiceUpdateUserArgs
	_args.Req = req
	var _result manageservice.BasicManagementServiceUpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginOrRegisterByPhone(ctx context.Context, req *manageservice.LoginOrRegisterByPhoneReq) (r *manageservice.LoginOrRegisterByPhoneResp, err error) {
	var _args manageservice.BasicManagementServiceLoginOrRegisterByPhoneArgs
	_args.Req = req
	var _result manageservice.BasicManagementServiceLoginOrRegisterByPhoneResult
	if err = p.c.Call(ctx, "LoginOrRegisterByPhone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserByPhone(ctx context.Context, req *manageservice.GetUserByPhoneReq) (r *manageservice.GetUserByPhoneResp, err error) {
	var _args manageservice.BasicManagementServiceGetUserByPhoneArgs
	_args.Req = req
	var _result manageservice.BasicManagementServiceGetUserByPhoneResult
	if err = p.c.Call(ctx, "GetUserByPhone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPointsBalance(ctx context.Context, req *manageservice.GetPointsBalanceReq) (r *manageservice.GetPointsBalanceResp, err error) {
	var _args manageservice.BasicManagementServiceGetPointsBalanceArgs
	_args.Req = req
	var _result manageservice.BasicManagementServiceGetPointsBalanceResult
	if err = p.c.Call(ctx, "GetPointsBalance", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GrantPoints(ctx context.Context, req *manageservice.GrantPointsReq) (r *base.BaseResp, err error) {
	var _args manageservice.BasicManagementServiceGrantPointsArgs
	_args.Req = req
	var _result manageservice.BasicManagementServiceGrantPointsResult
	if err = p.c.Call(ctx, "GrantPoints", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeductPoints(ctx context.Context, req *manageservice.DeductPointsReq) (r *base.BaseResp, err error) {
	var _args manageservice.BasicManagementServiceDeductPointsArgs
	_args.Req = req
	var _result manageservice.BasicManagementServiceDeductPointsResult
	if err = p.c.Call(ctx, "DeductPoints", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTransactionHistory(ctx context.Context, req *manageservice.GetTransactionHistoryReq) (r *manageservice.GetTransactionHistoryResp, err error) {
	var _args manageservice.BasicManagementServiceGetTransactionHistoryArgs
	_args.Req = req
	var _result manageservice.BasicManagementServiceGetTransactionHistoryResult
	if err = p.c.Call(ctx, "GetTransactionHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
