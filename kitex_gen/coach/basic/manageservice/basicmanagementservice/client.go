// Code generated by Kitex v0.14.1. DO NOT EDIT.

package basicmanagementservice

import (
	"context"
	manageservice "github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/basic/manageservice"
	base "github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/common/base"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	RegisterUser(ctx context.Context, req *manageservice.RegisterUserReq, callOptions ...callopt.Option) (r *manageservice.RegisterUserResp, err error)
	GetUserByID(ctx context.Context, req *manageservice.GetUserByIDReq, callOptions ...callopt.Option) (r *manageservice.GetUserByIDResp, err error)
	UpdateUser(ctx context.Context, req *manageservice.UpdateUserReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	LoginOrRegisterByPhone(ctx context.Context, req *manageservice.LoginOrRegisterByPhoneReq, callOptions ...callopt.Option) (r *manageservice.LoginOrRegisterByPhoneResp, err error)
	GetUserByPhone(ctx context.Context, req *manageservice.GetUserByPhoneReq, callOptions ...callopt.Option) (r *manageservice.GetUserByPhoneResp, err error)
	GetPointsBalance(ctx context.Context, req *manageservice.GetPointsBalanceReq, callOptions ...callopt.Option) (r *manageservice.GetPointsBalanceResp, err error)
	GrantPoints(ctx context.Context, req *manageservice.GrantPointsReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	DeductPoints(ctx context.Context, req *manageservice.DeductPointsReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	GetTransactionHistory(ctx context.Context, req *manageservice.GetTransactionHistoryReq, callOptions ...callopt.Option) (r *manageservice.GetTransactionHistoryResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kBasicManagementServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kBasicManagementServiceClient struct {
	*kClient
}

func (p *kBasicManagementServiceClient) RegisterUser(ctx context.Context, req *manageservice.RegisterUserReq, callOptions ...callopt.Option) (r *manageservice.RegisterUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegisterUser(ctx, req)
}

func (p *kBasicManagementServiceClient) GetUserByID(ctx context.Context, req *manageservice.GetUserByIDReq, callOptions ...callopt.Option) (r *manageservice.GetUserByIDResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserByID(ctx, req)
}

func (p *kBasicManagementServiceClient) UpdateUser(ctx context.Context, req *manageservice.UpdateUserReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUser(ctx, req)
}

func (p *kBasicManagementServiceClient) LoginOrRegisterByPhone(ctx context.Context, req *manageservice.LoginOrRegisterByPhoneReq, callOptions ...callopt.Option) (r *manageservice.LoginOrRegisterByPhoneResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginOrRegisterByPhone(ctx, req)
}

func (p *kBasicManagementServiceClient) GetUserByPhone(ctx context.Context, req *manageservice.GetUserByPhoneReq, callOptions ...callopt.Option) (r *manageservice.GetUserByPhoneResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserByPhone(ctx, req)
}

func (p *kBasicManagementServiceClient) GetPointsBalance(ctx context.Context, req *manageservice.GetPointsBalanceReq, callOptions ...callopt.Option) (r *manageservice.GetPointsBalanceResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPointsBalance(ctx, req)
}

func (p *kBasicManagementServiceClient) GrantPoints(ctx context.Context, req *manageservice.GrantPointsReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GrantPoints(ctx, req)
}

func (p *kBasicManagementServiceClient) DeductPoints(ctx context.Context, req *manageservice.DeductPointsReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeductPoints(ctx, req)
}

func (p *kBasicManagementServiceClient) GetTransactionHistory(ctx context.Context, req *manageservice.GetTransactionHistoryReq, callOptions ...callopt.Option) (r *manageservice.GetTransactionHistoryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTransactionHistory(ctx, req)
}
