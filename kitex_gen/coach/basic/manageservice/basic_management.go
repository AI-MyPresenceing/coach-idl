// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package manageservice

import (
	"context"
	"fmt"
	"github.com/AI-MyPresenceing/coach-idl/kitex_gen/coach/common/base"
)

type User struct {
	UserId   string `thrift:"userId,1" frugal:"1,default,string" json:"userId"`
	Nickname string `thrift:"nickname,2" frugal:"2,default,string" json:"nickname"`
	Phone    string `thrift:"phone,3" frugal:"3,default,string" json:"phone"`
	Position string `thrift:"position,4" frugal:"4,default,string" json:"position"`
	Industry string `thrift:"industry,5" frugal:"5,default,string" json:"industry"`
	Status   int32  `thrift:"status,6" frugal:"6,default,i32" json:"status"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetUserId() (v string) {
	return p.UserId
}

func (p *User) GetNickname() (v string) {
	return p.Nickname
}

func (p *User) GetPhone() (v string) {
	return p.Phone
}

func (p *User) GetPosition() (v string) {
	return p.Position
}

func (p *User) GetIndustry() (v string) {
	return p.Industry
}

func (p *User) GetStatus() (v int32) {
	return p.Status
}
func (p *User) SetUserId(val string) {
	p.UserId = val
}
func (p *User) SetNickname(val string) {
	p.Nickname = val
}
func (p *User) SetPhone(val string) {
	p.Phone = val
}
func (p *User) SetPosition(val string) {
	p.Position = val
}
func (p *User) SetIndustry(val string) {
	p.Industry = val
}
func (p *User) SetStatus(val int32) {
	p.Status = val
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "userId",
	2: "nickname",
	3: "phone",
	4: "position",
	5: "industry",
	6: "status",
}

type PointsTransaction struct {
	TransactionId string `thrift:"transactionId,1" frugal:"1,default,string" json:"transactionId"`
	UserId        string `thrift:"userId,2" frugal:"2,default,string" json:"userId"`
	Type          int32  `thrift:"type,3" frugal:"3,default,i32" json:"type"`
	Amount        int64  `thrift:"amount,4" frugal:"4,default,i64" json:"amount"`
	Balance       int64  `thrift:"balance,5" frugal:"5,default,i64" json:"balance"`
	Description   string `thrift:"description,6" frugal:"6,default,string" json:"description"`
	Status        int32  `thrift:"status,7" frugal:"7,default,i32" json:"status"`
	CreatedAt     int64  `thrift:"createdAt,8" frugal:"8,default,i64" json:"createdAt"`
}

func NewPointsTransaction() *PointsTransaction {
	return &PointsTransaction{}
}

func (p *PointsTransaction) InitDefault() {
}

func (p *PointsTransaction) GetTransactionId() (v string) {
	return p.TransactionId
}

func (p *PointsTransaction) GetUserId() (v string) {
	return p.UserId
}

func (p *PointsTransaction) GetType() (v int32) {
	return p.Type
}

func (p *PointsTransaction) GetAmount() (v int64) {
	return p.Amount
}

func (p *PointsTransaction) GetBalance() (v int64) {
	return p.Balance
}

func (p *PointsTransaction) GetDescription() (v string) {
	return p.Description
}

func (p *PointsTransaction) GetStatus() (v int32) {
	return p.Status
}

func (p *PointsTransaction) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *PointsTransaction) SetTransactionId(val string) {
	p.TransactionId = val
}
func (p *PointsTransaction) SetUserId(val string) {
	p.UserId = val
}
func (p *PointsTransaction) SetType(val int32) {
	p.Type = val
}
func (p *PointsTransaction) SetAmount(val int64) {
	p.Amount = val
}
func (p *PointsTransaction) SetBalance(val int64) {
	p.Balance = val
}
func (p *PointsTransaction) SetDescription(val string) {
	p.Description = val
}
func (p *PointsTransaction) SetStatus(val int32) {
	p.Status = val
}
func (p *PointsTransaction) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *PointsTransaction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PointsTransaction(%+v)", *p)
}

var fieldIDToName_PointsTransaction = map[int16]string{
	1: "transactionId",
	2: "userId",
	3: "type",
	4: "amount",
	5: "balance",
	6: "description",
	7: "status",
	8: "createdAt",
}

type RegisterUserReq struct {
	Nickname string  `thrift:"nickname,1,required" frugal:"1,required,string" json:"nickname"`
	Phone    string  `thrift:"phone,2,required" frugal:"2,required,string" json:"phone"`
	Position *string `thrift:"position,3,optional" frugal:"3,optional,string" json:"position,omitempty"`
	Industry *string `thrift:"industry,4,optional" frugal:"4,optional,string" json:"industry,omitempty"`
}

func NewRegisterUserReq() *RegisterUserReq {
	return &RegisterUserReq{}
}

func (p *RegisterUserReq) InitDefault() {
}

func (p *RegisterUserReq) GetNickname() (v string) {
	return p.Nickname
}

func (p *RegisterUserReq) GetPhone() (v string) {
	return p.Phone
}

var RegisterUserReq_Position_DEFAULT string

func (p *RegisterUserReq) GetPosition() (v string) {
	if !p.IsSetPosition() {
		return RegisterUserReq_Position_DEFAULT
	}
	return *p.Position
}

var RegisterUserReq_Industry_DEFAULT string

func (p *RegisterUserReq) GetIndustry() (v string) {
	if !p.IsSetIndustry() {
		return RegisterUserReq_Industry_DEFAULT
	}
	return *p.Industry
}
func (p *RegisterUserReq) SetNickname(val string) {
	p.Nickname = val
}
func (p *RegisterUserReq) SetPhone(val string) {
	p.Phone = val
}
func (p *RegisterUserReq) SetPosition(val *string) {
	p.Position = val
}
func (p *RegisterUserReq) SetIndustry(val *string) {
	p.Industry = val
}

func (p *RegisterUserReq) IsSetPosition() bool {
	return p.Position != nil
}

func (p *RegisterUserReq) IsSetIndustry() bool {
	return p.Industry != nil
}

func (p *RegisterUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterUserReq(%+v)", *p)
}

var fieldIDToName_RegisterUserReq = map[int16]string{
	1: "nickname",
	2: "phone",
	3: "position",
	4: "industry",
}

type RegisterUserResp struct {
	UserId   string         `thrift:"userId,1" frugal:"1,default,string" json:"userId"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewRegisterUserResp() *RegisterUserResp {
	return &RegisterUserResp{}
}

func (p *RegisterUserResp) InitDefault() {
}

func (p *RegisterUserResp) GetUserId() (v string) {
	return p.UserId
}

var RegisterUserResp_BaseResp_DEFAULT *base.BaseResp

func (p *RegisterUserResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return RegisterUserResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RegisterUserResp) SetUserId(val string) {
	p.UserId = val
}
func (p *RegisterUserResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *RegisterUserResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RegisterUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterUserResp(%+v)", *p)
}

var fieldIDToName_RegisterUserResp = map[int16]string{
	1:   "userId",
	255: "baseResp",
}

type GetUserByIDReq struct {
	UserId string `thrift:"userId,1,required" frugal:"1,required,string" json:"userId"`
}

func NewGetUserByIDReq() *GetUserByIDReq {
	return &GetUserByIDReq{}
}

func (p *GetUserByIDReq) InitDefault() {
}

func (p *GetUserByIDReq) GetUserId() (v string) {
	return p.UserId
}
func (p *GetUserByIDReq) SetUserId(val string) {
	p.UserId = val
}

func (p *GetUserByIDReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserByIDReq(%+v)", *p)
}

var fieldIDToName_GetUserByIDReq = map[int16]string{
	1: "userId",
}

type GetUserByIDResp struct {
	User     *User          `thrift:"user,1" frugal:"1,default,User" json:"user"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetUserByIDResp() *GetUserByIDResp {
	return &GetUserByIDResp{}
}

func (p *GetUserByIDResp) InitDefault() {
}

var GetUserByIDResp_User_DEFAULT *User

func (p *GetUserByIDResp) GetUser() (v *User) {
	if !p.IsSetUser() {
		return GetUserByIDResp_User_DEFAULT
	}
	return p.User
}

var GetUserByIDResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetUserByIDResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetUserByIDResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetUserByIDResp) SetUser(val *User) {
	p.User = val
}
func (p *GetUserByIDResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetUserByIDResp) IsSetUser() bool {
	return p.User != nil
}

func (p *GetUserByIDResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetUserByIDResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserByIDResp(%+v)", *p)
}

var fieldIDToName_GetUserByIDResp = map[int16]string{
	1:   "user",
	255: "baseResp",
}

type UpdateUserReq struct {
	UserId   string  `thrift:"userId,1,required" frugal:"1,required,string" json:"userId"`
	Nickname *string `thrift:"nickname,2,optional" frugal:"2,optional,string" json:"nickname,omitempty"`
	Position *string `thrift:"position,3,optional" frugal:"3,optional,string" json:"position,omitempty"`
	Industry *string `thrift:"industry,4,optional" frugal:"4,optional,string" json:"industry,omitempty"`
}

func NewUpdateUserReq() *UpdateUserReq {
	return &UpdateUserReq{}
}

func (p *UpdateUserReq) InitDefault() {
}

func (p *UpdateUserReq) GetUserId() (v string) {
	return p.UserId
}

var UpdateUserReq_Nickname_DEFAULT string

func (p *UpdateUserReq) GetNickname() (v string) {
	if !p.IsSetNickname() {
		return UpdateUserReq_Nickname_DEFAULT
	}
	return *p.Nickname
}

var UpdateUserReq_Position_DEFAULT string

func (p *UpdateUserReq) GetPosition() (v string) {
	if !p.IsSetPosition() {
		return UpdateUserReq_Position_DEFAULT
	}
	return *p.Position
}

var UpdateUserReq_Industry_DEFAULT string

func (p *UpdateUserReq) GetIndustry() (v string) {
	if !p.IsSetIndustry() {
		return UpdateUserReq_Industry_DEFAULT
	}
	return *p.Industry
}
func (p *UpdateUserReq) SetUserId(val string) {
	p.UserId = val
}
func (p *UpdateUserReq) SetNickname(val *string) {
	p.Nickname = val
}
func (p *UpdateUserReq) SetPosition(val *string) {
	p.Position = val
}
func (p *UpdateUserReq) SetIndustry(val *string) {
	p.Industry = val
}

func (p *UpdateUserReq) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *UpdateUserReq) IsSetPosition() bool {
	return p.Position != nil
}

func (p *UpdateUserReq) IsSetIndustry() bool {
	return p.Industry != nil
}

func (p *UpdateUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserReq(%+v)", *p)
}

var fieldIDToName_UpdateUserReq = map[int16]string{
	1: "userId",
	2: "nickname",
	3: "position",
	4: "industry",
}

type GetPointsBalanceReq struct {
	UserId string `thrift:"userId,1,required" frugal:"1,required,string" json:"userId"`
}

func NewGetPointsBalanceReq() *GetPointsBalanceReq {
	return &GetPointsBalanceReq{}
}

func (p *GetPointsBalanceReq) InitDefault() {
}

func (p *GetPointsBalanceReq) GetUserId() (v string) {
	return p.UserId
}
func (p *GetPointsBalanceReq) SetUserId(val string) {
	p.UserId = val
}

func (p *GetPointsBalanceReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPointsBalanceReq(%+v)", *p)
}

var fieldIDToName_GetPointsBalanceReq = map[int16]string{
	1: "userId",
}

type GetPointsBalanceResp struct {
	Balance  int64          `thrift:"balance,1" frugal:"1,default,i64" json:"balance"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetPointsBalanceResp() *GetPointsBalanceResp {
	return &GetPointsBalanceResp{}
}

func (p *GetPointsBalanceResp) InitDefault() {
}

func (p *GetPointsBalanceResp) GetBalance() (v int64) {
	return p.Balance
}

var GetPointsBalanceResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetPointsBalanceResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetPointsBalanceResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetPointsBalanceResp) SetBalance(val int64) {
	p.Balance = val
}
func (p *GetPointsBalanceResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetPointsBalanceResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetPointsBalanceResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPointsBalanceResp(%+v)", *p)
}

var fieldIDToName_GetPointsBalanceResp = map[int16]string{
	1:   "balance",
	255: "baseResp",
}

type GrantPointsReq struct {
	UserId      string  `thrift:"userId,1,required" frugal:"1,required,string" json:"userId"`
	Amount      int64   `thrift:"amount,2,required" frugal:"2,required,i64" json:"amount"`
	Description *string `thrift:"description,3,optional" frugal:"3,optional,string" json:"description,omitempty"`
}

func NewGrantPointsReq() *GrantPointsReq {
	return &GrantPointsReq{}
}

func (p *GrantPointsReq) InitDefault() {
}

func (p *GrantPointsReq) GetUserId() (v string) {
	return p.UserId
}

func (p *GrantPointsReq) GetAmount() (v int64) {
	return p.Amount
}

var GrantPointsReq_Description_DEFAULT string

func (p *GrantPointsReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return GrantPointsReq_Description_DEFAULT
	}
	return *p.Description
}
func (p *GrantPointsReq) SetUserId(val string) {
	p.UserId = val
}
func (p *GrantPointsReq) SetAmount(val int64) {
	p.Amount = val
}
func (p *GrantPointsReq) SetDescription(val *string) {
	p.Description = val
}

func (p *GrantPointsReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *GrantPointsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantPointsReq(%+v)", *p)
}

var fieldIDToName_GrantPointsReq = map[int16]string{
	1: "userId",
	2: "amount",
	3: "description",
}

type DeductPointsReq struct {
	UserId      string  `thrift:"userId,1,required" frugal:"1,required,string" json:"userId"`
	Amount      int64   `thrift:"amount,2,required" frugal:"2,required,i64" json:"amount"`
	Description *string `thrift:"description,3,optional" frugal:"3,optional,string" json:"description,omitempty"`
}

func NewDeductPointsReq() *DeductPointsReq {
	return &DeductPointsReq{}
}

func (p *DeductPointsReq) InitDefault() {
}

func (p *DeductPointsReq) GetUserId() (v string) {
	return p.UserId
}

func (p *DeductPointsReq) GetAmount() (v int64) {
	return p.Amount
}

var DeductPointsReq_Description_DEFAULT string

func (p *DeductPointsReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return DeductPointsReq_Description_DEFAULT
	}
	return *p.Description
}
func (p *DeductPointsReq) SetUserId(val string) {
	p.UserId = val
}
func (p *DeductPointsReq) SetAmount(val int64) {
	p.Amount = val
}
func (p *DeductPointsReq) SetDescription(val *string) {
	p.Description = val
}

func (p *DeductPointsReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *DeductPointsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeductPointsReq(%+v)", *p)
}

var fieldIDToName_DeductPointsReq = map[int16]string{
	1: "userId",
	2: "amount",
	3: "description",
}

type GetTransactionHistoryReq struct {
	UserId string `thrift:"userId,1,required" frugal:"1,required,string" json:"userId"`
	Page   int32  `thrift:"page,2,optional" frugal:"2,optional,i32" json:"page,omitempty"`
	Size   int32  `thrift:"size,3,optional" frugal:"3,optional,i32" json:"size,omitempty"`
}

func NewGetTransactionHistoryReq() *GetTransactionHistoryReq {
	return &GetTransactionHistoryReq{

		Page: 1,
		Size: 10,
	}
}

func (p *GetTransactionHistoryReq) InitDefault() {
	p.Page = 1
	p.Size = 10
}

func (p *GetTransactionHistoryReq) GetUserId() (v string) {
	return p.UserId
}

var GetTransactionHistoryReq_Page_DEFAULT int32 = 1

func (p *GetTransactionHistoryReq) GetPage() (v int32) {
	if !p.IsSetPage() {
		return GetTransactionHistoryReq_Page_DEFAULT
	}
	return p.Page
}

var GetTransactionHistoryReq_Size_DEFAULT int32 = 10

func (p *GetTransactionHistoryReq) GetSize() (v int32) {
	if !p.IsSetSize() {
		return GetTransactionHistoryReq_Size_DEFAULT
	}
	return p.Size
}
func (p *GetTransactionHistoryReq) SetUserId(val string) {
	p.UserId = val
}
func (p *GetTransactionHistoryReq) SetPage(val int32) {
	p.Page = val
}
func (p *GetTransactionHistoryReq) SetSize(val int32) {
	p.Size = val
}

func (p *GetTransactionHistoryReq) IsSetPage() bool {
	return p.Page != GetTransactionHistoryReq_Page_DEFAULT
}

func (p *GetTransactionHistoryReq) IsSetSize() bool {
	return p.Size != GetTransactionHistoryReq_Size_DEFAULT
}

func (p *GetTransactionHistoryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTransactionHistoryReq(%+v)", *p)
}

var fieldIDToName_GetTransactionHistoryReq = map[int16]string{
	1: "userId",
	2: "page",
	3: "size",
}

type GetTransactionHistoryResp struct {
	Transactions []*PointsTransaction `thrift:"transactions,1" frugal:"1,default,list<PointsTransaction>" json:"transactions"`
	Total        int32                `thrift:"total,2" frugal:"2,default,i32" json:"total"`
	BaseResp     *base.BaseResp       `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetTransactionHistoryResp() *GetTransactionHistoryResp {
	return &GetTransactionHistoryResp{}
}

func (p *GetTransactionHistoryResp) InitDefault() {
}

func (p *GetTransactionHistoryResp) GetTransactions() (v []*PointsTransaction) {
	return p.Transactions
}

func (p *GetTransactionHistoryResp) GetTotal() (v int32) {
	return p.Total
}

var GetTransactionHistoryResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetTransactionHistoryResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetTransactionHistoryResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetTransactionHistoryResp) SetTransactions(val []*PointsTransaction) {
	p.Transactions = val
}
func (p *GetTransactionHistoryResp) SetTotal(val int32) {
	p.Total = val
}
func (p *GetTransactionHistoryResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetTransactionHistoryResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTransactionHistoryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTransactionHistoryResp(%+v)", *p)
}

var fieldIDToName_GetTransactionHistoryResp = map[int16]string{
	1:   "transactions",
	2:   "total",
	255: "baseResp",
}

type LoginOrRegisterByPhoneReq struct {
	Phone    string  `thrift:"phone,1,required" frugal:"1,required,string" json:"phone"`
	Nickname *string `thrift:"nickname,2,optional" frugal:"2,optional,string" json:"nickname,omitempty"`
}

func NewLoginOrRegisterByPhoneReq() *LoginOrRegisterByPhoneReq {
	return &LoginOrRegisterByPhoneReq{}
}

func (p *LoginOrRegisterByPhoneReq) InitDefault() {
}

func (p *LoginOrRegisterByPhoneReq) GetPhone() (v string) {
	return p.Phone
}

var LoginOrRegisterByPhoneReq_Nickname_DEFAULT string

func (p *LoginOrRegisterByPhoneReq) GetNickname() (v string) {
	if !p.IsSetNickname() {
		return LoginOrRegisterByPhoneReq_Nickname_DEFAULT
	}
	return *p.Nickname
}
func (p *LoginOrRegisterByPhoneReq) SetPhone(val string) {
	p.Phone = val
}
func (p *LoginOrRegisterByPhoneReq) SetNickname(val *string) {
	p.Nickname = val
}

func (p *LoginOrRegisterByPhoneReq) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *LoginOrRegisterByPhoneReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginOrRegisterByPhoneReq(%+v)", *p)
}

var fieldIDToName_LoginOrRegisterByPhoneReq = map[int16]string{
	1: "phone",
	2: "nickname",
}

type LoginOrRegisterByPhoneResp struct {
	User      *User          `thrift:"user,1" frugal:"1,default,User" json:"user"`
	Token     string         `thrift:"token,2" frugal:"2,default,string" json:"token"`
	IsNewUser bool           `thrift:"isNewUser,3" frugal:"3,default,bool" json:"isNewUser"`
	BaseResp  *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewLoginOrRegisterByPhoneResp() *LoginOrRegisterByPhoneResp {
	return &LoginOrRegisterByPhoneResp{}
}

func (p *LoginOrRegisterByPhoneResp) InitDefault() {
}

var LoginOrRegisterByPhoneResp_User_DEFAULT *User

func (p *LoginOrRegisterByPhoneResp) GetUser() (v *User) {
	if !p.IsSetUser() {
		return LoginOrRegisterByPhoneResp_User_DEFAULT
	}
	return p.User
}

func (p *LoginOrRegisterByPhoneResp) GetToken() (v string) {
	return p.Token
}

func (p *LoginOrRegisterByPhoneResp) GetIsNewUser() (v bool) {
	return p.IsNewUser
}

var LoginOrRegisterByPhoneResp_BaseResp_DEFAULT *base.BaseResp

func (p *LoginOrRegisterByPhoneResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return LoginOrRegisterByPhoneResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *LoginOrRegisterByPhoneResp) SetUser(val *User) {
	p.User = val
}
func (p *LoginOrRegisterByPhoneResp) SetToken(val string) {
	p.Token = val
}
func (p *LoginOrRegisterByPhoneResp) SetIsNewUser(val bool) {
	p.IsNewUser = val
}
func (p *LoginOrRegisterByPhoneResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *LoginOrRegisterByPhoneResp) IsSetUser() bool {
	return p.User != nil
}

func (p *LoginOrRegisterByPhoneResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *LoginOrRegisterByPhoneResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginOrRegisterByPhoneResp(%+v)", *p)
}

var fieldIDToName_LoginOrRegisterByPhoneResp = map[int16]string{
	1:   "user",
	2:   "token",
	3:   "isNewUser",
	255: "baseResp",
}

type GetUserByPhoneReq struct {
	Phone string `thrift:"phone,1,required" frugal:"1,required,string" json:"phone"`
}

func NewGetUserByPhoneReq() *GetUserByPhoneReq {
	return &GetUserByPhoneReq{}
}

func (p *GetUserByPhoneReq) InitDefault() {
}

func (p *GetUserByPhoneReq) GetPhone() (v string) {
	return p.Phone
}
func (p *GetUserByPhoneReq) SetPhone(val string) {
	p.Phone = val
}

func (p *GetUserByPhoneReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserByPhoneReq(%+v)", *p)
}

var fieldIDToName_GetUserByPhoneReq = map[int16]string{
	1: "phone",
}

type GetUserByPhoneResp struct {
	User     *User          `thrift:"user,1" frugal:"1,default,User" json:"user"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetUserByPhoneResp() *GetUserByPhoneResp {
	return &GetUserByPhoneResp{}
}

func (p *GetUserByPhoneResp) InitDefault() {
}

var GetUserByPhoneResp_User_DEFAULT *User

func (p *GetUserByPhoneResp) GetUser() (v *User) {
	if !p.IsSetUser() {
		return GetUserByPhoneResp_User_DEFAULT
	}
	return p.User
}

var GetUserByPhoneResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetUserByPhoneResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetUserByPhoneResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetUserByPhoneResp) SetUser(val *User) {
	p.User = val
}
func (p *GetUserByPhoneResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetUserByPhoneResp) IsSetUser() bool {
	return p.User != nil
}

func (p *GetUserByPhoneResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetUserByPhoneResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserByPhoneResp(%+v)", *p)
}

var fieldIDToName_GetUserByPhoneResp = map[int16]string{
	1:   "user",
	255: "baseResp",
}

type BasicManagementService interface {
	RegisterUser(ctx context.Context, req *RegisterUserReq) (r *RegisterUserResp, err error)

	GetUserByID(ctx context.Context, req *GetUserByIDReq) (r *GetUserByIDResp, err error)

	UpdateUser(ctx context.Context, req *UpdateUserReq) (r *base.BaseResp, err error)

	LoginOrRegisterByPhone(ctx context.Context, req *LoginOrRegisterByPhoneReq) (r *LoginOrRegisterByPhoneResp, err error)

	GetUserByPhone(ctx context.Context, req *GetUserByPhoneReq) (r *GetUserByPhoneResp, err error)

	GetPointsBalance(ctx context.Context, req *GetPointsBalanceReq) (r *GetPointsBalanceResp, err error)

	GrantPoints(ctx context.Context, req *GrantPointsReq) (r *base.BaseResp, err error)

	DeductPoints(ctx context.Context, req *DeductPointsReq) (r *base.BaseResp, err error)

	GetTransactionHistory(ctx context.Context, req *GetTransactionHistoryReq) (r *GetTransactionHistoryResp, err error)
}

type BasicManagementServiceRegisterUserArgs struct {
	Req *RegisterUserReq `thrift:"req,1" frugal:"1,default,RegisterUserReq" json:"req"`
}

func NewBasicManagementServiceRegisterUserArgs() *BasicManagementServiceRegisterUserArgs {
	return &BasicManagementServiceRegisterUserArgs{}
}

func (p *BasicManagementServiceRegisterUserArgs) InitDefault() {
}

var BasicManagementServiceRegisterUserArgs_Req_DEFAULT *RegisterUserReq

func (p *BasicManagementServiceRegisterUserArgs) GetReq() (v *RegisterUserReq) {
	if !p.IsSetReq() {
		return BasicManagementServiceRegisterUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BasicManagementServiceRegisterUserArgs) SetReq(val *RegisterUserReq) {
	p.Req = val
}

func (p *BasicManagementServiceRegisterUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicManagementServiceRegisterUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceRegisterUserArgs(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceRegisterUserArgs = map[int16]string{
	1: "req",
}

type BasicManagementServiceRegisterUserResult struct {
	Success *RegisterUserResp `thrift:"success,0,optional" frugal:"0,optional,RegisterUserResp" json:"success,omitempty"`
}

func NewBasicManagementServiceRegisterUserResult() *BasicManagementServiceRegisterUserResult {
	return &BasicManagementServiceRegisterUserResult{}
}

func (p *BasicManagementServiceRegisterUserResult) InitDefault() {
}

var BasicManagementServiceRegisterUserResult_Success_DEFAULT *RegisterUserResp

func (p *BasicManagementServiceRegisterUserResult) GetSuccess() (v *RegisterUserResp) {
	if !p.IsSetSuccess() {
		return BasicManagementServiceRegisterUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BasicManagementServiceRegisterUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterUserResp)
}

func (p *BasicManagementServiceRegisterUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicManagementServiceRegisterUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceRegisterUserResult(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceRegisterUserResult = map[int16]string{
	0: "success",
}

type BasicManagementServiceGetUserByIDArgs struct {
	Req *GetUserByIDReq `thrift:"req,1" frugal:"1,default,GetUserByIDReq" json:"req"`
}

func NewBasicManagementServiceGetUserByIDArgs() *BasicManagementServiceGetUserByIDArgs {
	return &BasicManagementServiceGetUserByIDArgs{}
}

func (p *BasicManagementServiceGetUserByIDArgs) InitDefault() {
}

var BasicManagementServiceGetUserByIDArgs_Req_DEFAULT *GetUserByIDReq

func (p *BasicManagementServiceGetUserByIDArgs) GetReq() (v *GetUserByIDReq) {
	if !p.IsSetReq() {
		return BasicManagementServiceGetUserByIDArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BasicManagementServiceGetUserByIDArgs) SetReq(val *GetUserByIDReq) {
	p.Req = val
}

func (p *BasicManagementServiceGetUserByIDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicManagementServiceGetUserByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGetUserByIDArgs(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGetUserByIDArgs = map[int16]string{
	1: "req",
}

type BasicManagementServiceGetUserByIDResult struct {
	Success *GetUserByIDResp `thrift:"success,0,optional" frugal:"0,optional,GetUserByIDResp" json:"success,omitempty"`
}

func NewBasicManagementServiceGetUserByIDResult() *BasicManagementServiceGetUserByIDResult {
	return &BasicManagementServiceGetUserByIDResult{}
}

func (p *BasicManagementServiceGetUserByIDResult) InitDefault() {
}

var BasicManagementServiceGetUserByIDResult_Success_DEFAULT *GetUserByIDResp

func (p *BasicManagementServiceGetUserByIDResult) GetSuccess() (v *GetUserByIDResp) {
	if !p.IsSetSuccess() {
		return BasicManagementServiceGetUserByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BasicManagementServiceGetUserByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserByIDResp)
}

func (p *BasicManagementServiceGetUserByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicManagementServiceGetUserByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGetUserByIDResult(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGetUserByIDResult = map[int16]string{
	0: "success",
}

type BasicManagementServiceUpdateUserArgs struct {
	Req *UpdateUserReq `thrift:"req,1" frugal:"1,default,UpdateUserReq" json:"req"`
}

func NewBasicManagementServiceUpdateUserArgs() *BasicManagementServiceUpdateUserArgs {
	return &BasicManagementServiceUpdateUserArgs{}
}

func (p *BasicManagementServiceUpdateUserArgs) InitDefault() {
}

var BasicManagementServiceUpdateUserArgs_Req_DEFAULT *UpdateUserReq

func (p *BasicManagementServiceUpdateUserArgs) GetReq() (v *UpdateUserReq) {
	if !p.IsSetReq() {
		return BasicManagementServiceUpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BasicManagementServiceUpdateUserArgs) SetReq(val *UpdateUserReq) {
	p.Req = val
}

func (p *BasicManagementServiceUpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicManagementServiceUpdateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceUpdateUserArgs(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceUpdateUserArgs = map[int16]string{
	1: "req",
}

type BasicManagementServiceUpdateUserResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewBasicManagementServiceUpdateUserResult() *BasicManagementServiceUpdateUserResult {
	return &BasicManagementServiceUpdateUserResult{}
}

func (p *BasicManagementServiceUpdateUserResult) InitDefault() {
}

var BasicManagementServiceUpdateUserResult_Success_DEFAULT *base.BaseResp

func (p *BasicManagementServiceUpdateUserResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return BasicManagementServiceUpdateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BasicManagementServiceUpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *BasicManagementServiceUpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicManagementServiceUpdateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceUpdateUserResult(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceUpdateUserResult = map[int16]string{
	0: "success",
}

type BasicManagementServiceLoginOrRegisterByPhoneArgs struct {
	Req *LoginOrRegisterByPhoneReq `thrift:"req,1" frugal:"1,default,LoginOrRegisterByPhoneReq" json:"req"`
}

func NewBasicManagementServiceLoginOrRegisterByPhoneArgs() *BasicManagementServiceLoginOrRegisterByPhoneArgs {
	return &BasicManagementServiceLoginOrRegisterByPhoneArgs{}
}

func (p *BasicManagementServiceLoginOrRegisterByPhoneArgs) InitDefault() {
}

var BasicManagementServiceLoginOrRegisterByPhoneArgs_Req_DEFAULT *LoginOrRegisterByPhoneReq

func (p *BasicManagementServiceLoginOrRegisterByPhoneArgs) GetReq() (v *LoginOrRegisterByPhoneReq) {
	if !p.IsSetReq() {
		return BasicManagementServiceLoginOrRegisterByPhoneArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BasicManagementServiceLoginOrRegisterByPhoneArgs) SetReq(val *LoginOrRegisterByPhoneReq) {
	p.Req = val
}

func (p *BasicManagementServiceLoginOrRegisterByPhoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicManagementServiceLoginOrRegisterByPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceLoginOrRegisterByPhoneArgs(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceLoginOrRegisterByPhoneArgs = map[int16]string{
	1: "req",
}

type BasicManagementServiceLoginOrRegisterByPhoneResult struct {
	Success *LoginOrRegisterByPhoneResp `thrift:"success,0,optional" frugal:"0,optional,LoginOrRegisterByPhoneResp" json:"success,omitempty"`
}

func NewBasicManagementServiceLoginOrRegisterByPhoneResult() *BasicManagementServiceLoginOrRegisterByPhoneResult {
	return &BasicManagementServiceLoginOrRegisterByPhoneResult{}
}

func (p *BasicManagementServiceLoginOrRegisterByPhoneResult) InitDefault() {
}

var BasicManagementServiceLoginOrRegisterByPhoneResult_Success_DEFAULT *LoginOrRegisterByPhoneResp

func (p *BasicManagementServiceLoginOrRegisterByPhoneResult) GetSuccess() (v *LoginOrRegisterByPhoneResp) {
	if !p.IsSetSuccess() {
		return BasicManagementServiceLoginOrRegisterByPhoneResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BasicManagementServiceLoginOrRegisterByPhoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginOrRegisterByPhoneResp)
}

func (p *BasicManagementServiceLoginOrRegisterByPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicManagementServiceLoginOrRegisterByPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceLoginOrRegisterByPhoneResult(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceLoginOrRegisterByPhoneResult = map[int16]string{
	0: "success",
}

type BasicManagementServiceGetUserByPhoneArgs struct {
	Req *GetUserByPhoneReq `thrift:"req,1" frugal:"1,default,GetUserByPhoneReq" json:"req"`
}

func NewBasicManagementServiceGetUserByPhoneArgs() *BasicManagementServiceGetUserByPhoneArgs {
	return &BasicManagementServiceGetUserByPhoneArgs{}
}

func (p *BasicManagementServiceGetUserByPhoneArgs) InitDefault() {
}

var BasicManagementServiceGetUserByPhoneArgs_Req_DEFAULT *GetUserByPhoneReq

func (p *BasicManagementServiceGetUserByPhoneArgs) GetReq() (v *GetUserByPhoneReq) {
	if !p.IsSetReq() {
		return BasicManagementServiceGetUserByPhoneArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BasicManagementServiceGetUserByPhoneArgs) SetReq(val *GetUserByPhoneReq) {
	p.Req = val
}

func (p *BasicManagementServiceGetUserByPhoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicManagementServiceGetUserByPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGetUserByPhoneArgs(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGetUserByPhoneArgs = map[int16]string{
	1: "req",
}

type BasicManagementServiceGetUserByPhoneResult struct {
	Success *GetUserByPhoneResp `thrift:"success,0,optional" frugal:"0,optional,GetUserByPhoneResp" json:"success,omitempty"`
}

func NewBasicManagementServiceGetUserByPhoneResult() *BasicManagementServiceGetUserByPhoneResult {
	return &BasicManagementServiceGetUserByPhoneResult{}
}

func (p *BasicManagementServiceGetUserByPhoneResult) InitDefault() {
}

var BasicManagementServiceGetUserByPhoneResult_Success_DEFAULT *GetUserByPhoneResp

func (p *BasicManagementServiceGetUserByPhoneResult) GetSuccess() (v *GetUserByPhoneResp) {
	if !p.IsSetSuccess() {
		return BasicManagementServiceGetUserByPhoneResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BasicManagementServiceGetUserByPhoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserByPhoneResp)
}

func (p *BasicManagementServiceGetUserByPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicManagementServiceGetUserByPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGetUserByPhoneResult(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGetUserByPhoneResult = map[int16]string{
	0: "success",
}

type BasicManagementServiceGetPointsBalanceArgs struct {
	Req *GetPointsBalanceReq `thrift:"req,1" frugal:"1,default,GetPointsBalanceReq" json:"req"`
}

func NewBasicManagementServiceGetPointsBalanceArgs() *BasicManagementServiceGetPointsBalanceArgs {
	return &BasicManagementServiceGetPointsBalanceArgs{}
}

func (p *BasicManagementServiceGetPointsBalanceArgs) InitDefault() {
}

var BasicManagementServiceGetPointsBalanceArgs_Req_DEFAULT *GetPointsBalanceReq

func (p *BasicManagementServiceGetPointsBalanceArgs) GetReq() (v *GetPointsBalanceReq) {
	if !p.IsSetReq() {
		return BasicManagementServiceGetPointsBalanceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BasicManagementServiceGetPointsBalanceArgs) SetReq(val *GetPointsBalanceReq) {
	p.Req = val
}

func (p *BasicManagementServiceGetPointsBalanceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicManagementServiceGetPointsBalanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGetPointsBalanceArgs(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGetPointsBalanceArgs = map[int16]string{
	1: "req",
}

type BasicManagementServiceGetPointsBalanceResult struct {
	Success *GetPointsBalanceResp `thrift:"success,0,optional" frugal:"0,optional,GetPointsBalanceResp" json:"success,omitempty"`
}

func NewBasicManagementServiceGetPointsBalanceResult() *BasicManagementServiceGetPointsBalanceResult {
	return &BasicManagementServiceGetPointsBalanceResult{}
}

func (p *BasicManagementServiceGetPointsBalanceResult) InitDefault() {
}

var BasicManagementServiceGetPointsBalanceResult_Success_DEFAULT *GetPointsBalanceResp

func (p *BasicManagementServiceGetPointsBalanceResult) GetSuccess() (v *GetPointsBalanceResp) {
	if !p.IsSetSuccess() {
		return BasicManagementServiceGetPointsBalanceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BasicManagementServiceGetPointsBalanceResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPointsBalanceResp)
}

func (p *BasicManagementServiceGetPointsBalanceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicManagementServiceGetPointsBalanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGetPointsBalanceResult(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGetPointsBalanceResult = map[int16]string{
	0: "success",
}

type BasicManagementServiceGrantPointsArgs struct {
	Req *GrantPointsReq `thrift:"req,1" frugal:"1,default,GrantPointsReq" json:"req"`
}

func NewBasicManagementServiceGrantPointsArgs() *BasicManagementServiceGrantPointsArgs {
	return &BasicManagementServiceGrantPointsArgs{}
}

func (p *BasicManagementServiceGrantPointsArgs) InitDefault() {
}

var BasicManagementServiceGrantPointsArgs_Req_DEFAULT *GrantPointsReq

func (p *BasicManagementServiceGrantPointsArgs) GetReq() (v *GrantPointsReq) {
	if !p.IsSetReq() {
		return BasicManagementServiceGrantPointsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BasicManagementServiceGrantPointsArgs) SetReq(val *GrantPointsReq) {
	p.Req = val
}

func (p *BasicManagementServiceGrantPointsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicManagementServiceGrantPointsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGrantPointsArgs(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGrantPointsArgs = map[int16]string{
	1: "req",
}

type BasicManagementServiceGrantPointsResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewBasicManagementServiceGrantPointsResult() *BasicManagementServiceGrantPointsResult {
	return &BasicManagementServiceGrantPointsResult{}
}

func (p *BasicManagementServiceGrantPointsResult) InitDefault() {
}

var BasicManagementServiceGrantPointsResult_Success_DEFAULT *base.BaseResp

func (p *BasicManagementServiceGrantPointsResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return BasicManagementServiceGrantPointsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BasicManagementServiceGrantPointsResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *BasicManagementServiceGrantPointsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicManagementServiceGrantPointsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGrantPointsResult(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGrantPointsResult = map[int16]string{
	0: "success",
}

type BasicManagementServiceDeductPointsArgs struct {
	Req *DeductPointsReq `thrift:"req,1" frugal:"1,default,DeductPointsReq" json:"req"`
}

func NewBasicManagementServiceDeductPointsArgs() *BasicManagementServiceDeductPointsArgs {
	return &BasicManagementServiceDeductPointsArgs{}
}

func (p *BasicManagementServiceDeductPointsArgs) InitDefault() {
}

var BasicManagementServiceDeductPointsArgs_Req_DEFAULT *DeductPointsReq

func (p *BasicManagementServiceDeductPointsArgs) GetReq() (v *DeductPointsReq) {
	if !p.IsSetReq() {
		return BasicManagementServiceDeductPointsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BasicManagementServiceDeductPointsArgs) SetReq(val *DeductPointsReq) {
	p.Req = val
}

func (p *BasicManagementServiceDeductPointsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicManagementServiceDeductPointsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceDeductPointsArgs(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceDeductPointsArgs = map[int16]string{
	1: "req",
}

type BasicManagementServiceDeductPointsResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewBasicManagementServiceDeductPointsResult() *BasicManagementServiceDeductPointsResult {
	return &BasicManagementServiceDeductPointsResult{}
}

func (p *BasicManagementServiceDeductPointsResult) InitDefault() {
}

var BasicManagementServiceDeductPointsResult_Success_DEFAULT *base.BaseResp

func (p *BasicManagementServiceDeductPointsResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return BasicManagementServiceDeductPointsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BasicManagementServiceDeductPointsResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *BasicManagementServiceDeductPointsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicManagementServiceDeductPointsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceDeductPointsResult(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceDeductPointsResult = map[int16]string{
	0: "success",
}

type BasicManagementServiceGetTransactionHistoryArgs struct {
	Req *GetTransactionHistoryReq `thrift:"req,1" frugal:"1,default,GetTransactionHistoryReq" json:"req"`
}

func NewBasicManagementServiceGetTransactionHistoryArgs() *BasicManagementServiceGetTransactionHistoryArgs {
	return &BasicManagementServiceGetTransactionHistoryArgs{}
}

func (p *BasicManagementServiceGetTransactionHistoryArgs) InitDefault() {
}

var BasicManagementServiceGetTransactionHistoryArgs_Req_DEFAULT *GetTransactionHistoryReq

func (p *BasicManagementServiceGetTransactionHistoryArgs) GetReq() (v *GetTransactionHistoryReq) {
	if !p.IsSetReq() {
		return BasicManagementServiceGetTransactionHistoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BasicManagementServiceGetTransactionHistoryArgs) SetReq(val *GetTransactionHistoryReq) {
	p.Req = val
}

func (p *BasicManagementServiceGetTransactionHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicManagementServiceGetTransactionHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGetTransactionHistoryArgs(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGetTransactionHistoryArgs = map[int16]string{
	1: "req",
}

type BasicManagementServiceGetTransactionHistoryResult struct {
	Success *GetTransactionHistoryResp `thrift:"success,0,optional" frugal:"0,optional,GetTransactionHistoryResp" json:"success,omitempty"`
}

func NewBasicManagementServiceGetTransactionHistoryResult() *BasicManagementServiceGetTransactionHistoryResult {
	return &BasicManagementServiceGetTransactionHistoryResult{}
}

func (p *BasicManagementServiceGetTransactionHistoryResult) InitDefault() {
}

var BasicManagementServiceGetTransactionHistoryResult_Success_DEFAULT *GetTransactionHistoryResp

func (p *BasicManagementServiceGetTransactionHistoryResult) GetSuccess() (v *GetTransactionHistoryResp) {
	if !p.IsSetSuccess() {
		return BasicManagementServiceGetTransactionHistoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BasicManagementServiceGetTransactionHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTransactionHistoryResp)
}

func (p *BasicManagementServiceGetTransactionHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicManagementServiceGetTransactionHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicManagementServiceGetTransactionHistoryResult(%+v)", *p)
}

var fieldIDToName_BasicManagementServiceGetTransactionHistoryResult = map[int16]string{
	0: "success",
}
